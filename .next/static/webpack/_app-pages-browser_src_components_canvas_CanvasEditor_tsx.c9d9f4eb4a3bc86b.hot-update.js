"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_components_canvas_CanvasEditor_tsx",{

/***/ "(app-pages-browser)/./src/components/canvas/CanvasEditor.tsx":
/*!************************************************!*\
  !*** ./src/components/canvas/CanvasEditor.tsx ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-konva */ \"(app-pages-browser)/./node_modules/react-konva/es/ReactKonva.js\");\n/* harmony import */ var _GridLayer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GridLayer */ \"(app-pages-browser)/./src/components/canvas/GridLayer.tsx\");\n/* harmony import */ var _EquipmentLayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EquipmentLayer */ \"(app-pages-browser)/./src/components/canvas/EquipmentLayer.tsx\");\n/* harmony import */ var _BackgroundLayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BackgroundLayer */ \"(app-pages-browser)/./src/components/canvas/BackgroundLayer.tsx\");\n/* harmony import */ var _BackgroundImageManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BackgroundImageManager */ \"(app-pages-browser)/./src/components/canvas/BackgroundImageManager.tsx\");\n/* harmony import */ var _ScaleBar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ScaleBar */ \"(app-pages-browser)/./src/components/canvas/ScaleBar.tsx\");\n/* harmony import */ var _MeasurementTool__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MeasurementTool */ \"(app-pages-browser)/./src/components/canvas/MeasurementTool.tsx\");\n/* harmony import */ var _DistanceInputModal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DistanceInputModal */ \"(app-pages-browser)/./src/components/canvas/DistanceInputModal.tsx\");\n/* harmony import */ var _SimpleMeasurementTool__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SimpleMeasurementTool */ \"(app-pages-browser)/./src/components/canvas/SimpleMeasurementTool.tsx\");\n/* harmony import */ var _EnhancedMeasurementTool__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EnhancedMeasurementTool */ \"(app-pages-browser)/./src/components/canvas/EnhancedMeasurementTool.tsx\");\n/* harmony import */ var _EnhancedCalibrateDialog__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./EnhancedCalibrateDialog */ \"(app-pages-browser)/./src/components/canvas/EnhancedCalibrateDialog.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\n\n\nconst CanvasEditor = (param)=>{\n    let { width = 1200, height = 800, className = '', onEquipmentAdd, placedEquipment = [], equipmentDefinitions, onEquipmentSelect, onEquipmentMove, onEquipmentRotate, onEquipmentDelete, selectedEquipmentId, backgroundImages = [], onBackgroundImageAdd, onBackgroundImageUpdate, onBackgroundImageDelete, onCanvasReady } = param;\n    _s();\n    const stageRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [isClient, setIsClient] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Canvas configuration for 1,000,000 sq ft (1000ft x 1000ft)\n    const CANVAS_AREA_SQ_FT = 1000000;\n    const CANVAS_SIDE_FT = Math.sqrt(CANVAS_AREA_SQ_FT) // 1000 feet\n    ;\n    const PIXELS_PER_FOOT = 10 // Optimized for performance with ultra-large areas\n    ;\n    const CANVAS_SIZE_PIXELS = CANVAS_SIDE_FT * PIXELS_PER_FOOT // 10000 pixels\n    ;\n    const [canvasState, setCanvasState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        scale: 0.2,\n        x: 0,\n        y: 0\n    });\n    const [stageSize, setStageSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width,\n        height\n    });\n    const [gridVisible, setGridVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [backgroundManagerOpen, setBackgroundManagerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedBackgroundImageId, setSelectedBackgroundImageId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [scaleBarVisible, setScaleBarVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [measurementToolActive, setMeasurementToolActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [measurements, setMeasurements] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [activeMeasurementTool, setActiveMeasurementTool] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [simpleMeasurements, setSimpleMeasurements] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [showDistanceInput, setShowDistanceInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [distanceInputData, setDistanceInputData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Enhanced measurement workflow states\n    const [measurementEditMode, setMeasurementEditMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentMeasurement, setCurrentMeasurement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showCalibrateDialog, setShowCalibrateDialog] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Handle canvas ready callback\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"CanvasEditor.useEffect\": ()=>{\n            if (isClient && onCanvasReady) {\n                // Use a timeout to ensure the stage is fully mounted\n                const timeout = setTimeout({\n                    \"CanvasEditor.useEffect.timeout\": ()=>{\n                        if (stageRef.current) {\n                            const container = stageRef.current.container();\n                            if (container) {\n                                console.log('Canvas ready, calling onCanvasReady with container:', container);\n                                onCanvasReady(container);\n                            }\n                        }\n                    }\n                }[\"CanvasEditor.useEffect.timeout\"], 100) // Small delay to ensure stage is mounted\n                ;\n                return ({\n                    \"CanvasEditor.useEffect\": ()=>clearTimeout(timeout)\n                })[\"CanvasEditor.useEffect\"];\n            }\n        }\n    }[\"CanvasEditor.useEffect\"], [\n        onCanvasReady,\n        isClient\n    ]);\n    // Handle window resize to make canvas responsive\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"CanvasEditor.useEffect\": ()=>{\n            const handleResize = {\n                \"CanvasEditor.useEffect.handleResize\": ()=>{\n                    if (stageRef.current) {\n                        const container = stageRef.current.container();\n                        const containerWidth = container.offsetWidth;\n                        const containerHeight = container.offsetHeight;\n                        setStageSize({\n                            width: containerWidth,\n                            height: containerHeight\n                        });\n                    }\n                }\n            }[\"CanvasEditor.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            handleResize(); // Initial call\n            return ({\n                \"CanvasEditor.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"CanvasEditor.useEffect\"];\n        }\n    }[\"CanvasEditor.useEffect\"], []);\n    // Handle zoom with mouse wheel\n    const handleWheel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleWheel]\": (e)=>{\n            e.evt.preventDefault();\n            const stage = e.target.getStage();\n            if (!stage) return;\n            const oldScale = stage.scaleX();\n            const pointer = stage.getPointerPosition();\n            if (!pointer) return;\n            // Zoom sensitivity\n            const scaleBy = 1.1;\n            const newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;\n            // Limit zoom range - allow zooming out to 4% to match Max Out button\n            const minScale = 0.04 // 4% minimum zoom\n            ;\n            const maxScale = 5;\n            const clampedScale = Math.max(minScale, Math.min(maxScale, newScale));\n            // Calculate new position to zoom towards mouse pointer\n            const mousePointTo = {\n                x: (pointer.x - stage.x()) / oldScale,\n                y: (pointer.y - stage.y()) / oldScale\n            };\n            const newPos = {\n                x: pointer.x - mousePointTo.x * clampedScale,\n                y: pointer.y - mousePointTo.y * clampedScale\n            };\n            stage.scale({\n                x: clampedScale,\n                y: clampedScale\n            });\n            stage.position(newPos);\n            stage.batchDraw();\n            setCanvasState({\n                scale: clampedScale,\n                x: newPos.x,\n                y: newPos.y\n            });\n        }\n    }[\"CanvasEditor.useCallback[handleWheel]\"], []);\n    // Handle panning with mouse drag\n    const handleDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleDragEnd]\": (e)=>{\n            const stage = e.target;\n            setCanvasState({\n                \"CanvasEditor.useCallback[handleDragEnd]\": (prev)=>({\n                        ...prev,\n                        x: stage.x(),\n                        y: stage.y()\n                    })\n            }[\"CanvasEditor.useCallback[handleDragEnd]\"]);\n        }\n    }[\"CanvasEditor.useCallback[handleDragEnd]\"], []);\n    // Reset canvas to center and default zoom for 250k sq ft canvas\n    const resetCanvas = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[resetCanvas]\": ()=>{\n            const defaultScale = 0.2 // 20% zoom for large canvas overview\n            ;\n            const centerX = stageSize.width / 2 - CANVAS_SIZE_PIXELS / 2 * defaultScale;\n            const centerY = stageSize.height / 2 - CANVAS_SIZE_PIXELS / 2 * defaultScale;\n            if (stageRef.current) {\n                stageRef.current.scale({\n                    x: defaultScale,\n                    y: defaultScale\n                });\n                stageRef.current.position({\n                    x: centerX,\n                    y: centerY\n                });\n                stageRef.current.batchDraw();\n            }\n            setCanvasState({\n                scale: defaultScale,\n                x: centerX,\n                y: centerY\n            });\n        }\n    }[\"CanvasEditor.useCallback[resetCanvas]\"], [\n        stageSize,\n        CANVAS_SIZE_PIXELS\n    ]);\n    // Fit canvas to show all equipment with proper centering and zoom\n    const fitToContent = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[fitToContent]\": ()=>{\n            console.log('=== FIT TO CONTENT CALLED ===');\n            console.log('placedEquipment:', placedEquipment);\n            if (!placedEquipment || placedEquipment.length === 0) {\n                console.log('No equipment to fit to, resetting canvas');\n                resetCanvas();\n                return;\n            }\n            // Calculate bounding box of all equipment including their clearance zones\n            let minX = Infinity, maxX = -Infinity;\n            let minY = Infinity, maxY = -Infinity;\n            placedEquipment.forEach({\n                \"CanvasEditor.useCallback[fitToContent]\": (equipment)=>{\n                    const equipmentDef = equipmentDefinitions === null || equipmentDefinitions === void 0 ? void 0 : equipmentDefinitions.find({\n                        \"CanvasEditor.useCallback[fitToContent]\": (def)=>def.id === equipment.equipmentId\n                    }[\"CanvasEditor.useCallback[fitToContent]\"]);\n                    if (!equipmentDef) return;\n                    const dimensions = equipment.dimensions;\n                    const isCircular = dimensions.shape === 'circle';\n                    // Calculate equipment bounds including clearance\n                    const clearance = equipmentDef.rideClearing || 0;\n                    const clearancePixels = clearance * PIXELS_PER_FOOT;\n                    let equipmentMinX, equipmentMaxX, equipmentMinY, equipmentMaxY;\n                    if (isCircular) {\n                        const radius = dimensions.radius * PIXELS_PER_FOOT;\n                        equipmentMinX = equipment.x - radius - clearancePixels;\n                        equipmentMaxX = equipment.x + radius + clearancePixels;\n                        equipmentMinY = equipment.y - radius - clearancePixels;\n                        equipmentMaxY = equipment.y + radius + clearancePixels;\n                    } else {\n                        const width = dimensions.width * PIXELS_PER_FOOT;\n                        const height = dimensions.height * PIXELS_PER_FOOT;\n                        equipmentMinX = equipment.x - width / 2 - clearancePixels;\n                        equipmentMaxX = equipment.x + width / 2 + clearancePixels;\n                        equipmentMinY = equipment.y - height / 2 - clearancePixels;\n                        equipmentMaxY = equipment.y + height / 2 + clearancePixels;\n                    }\n                    minX = Math.min(minX, equipmentMinX);\n                    maxX = Math.max(maxX, equipmentMaxX);\n                    minY = Math.min(minY, equipmentMinY);\n                    maxY = Math.max(maxY, equipmentMaxY);\n                }\n            }[\"CanvasEditor.useCallback[fitToContent]\"]);\n            // Add padding around the bounding box\n            const padding = 100 // 100 pixels padding\n            ;\n            minX -= padding;\n            maxX += padding;\n            minY -= padding;\n            maxY += padding;\n            // Calculate the center of all equipment\n            const centerX = (minX + maxX) / 2;\n            const centerY = (minY + maxY) / 2;\n            // Calculate required scale to fit all equipment in viewport\n            const contentWidth = maxX - minX;\n            const contentHeight = maxY - minY;\n            const scaleX = stageSize.width / contentWidth;\n            const scaleY = stageSize.height / contentHeight;\n            const optimalScale = Math.min(scaleX, scaleY, 2) // Cap at 2x zoom\n            ;\n            // Calculate the position to center the content\n            const newX = stageSize.width / 2 - centerX * optimalScale;\n            const newY = stageSize.height / 2 - centerY * optimalScale;\n            // Apply the new view settings to both stage and state\n            console.log('Applying new canvas state:', {\n                scale: optimalScale,\n                x: newX,\n                y: newY,\n                contentBounds: {\n                    minX,\n                    maxX,\n                    minY,\n                    maxY\n                },\n                center: {\n                    centerX,\n                    centerY\n                }\n            });\n            if (stageRef.current) {\n                stageRef.current.scale({\n                    x: optimalScale,\n                    y: optimalScale\n                });\n                stageRef.current.position({\n                    x: newX,\n                    y: newY\n                });\n                stageRef.current.batchDraw();\n            }\n            setCanvasState({\n                scale: optimalScale,\n                x: newX,\n                y: newY\n            });\n        }\n    }[\"CanvasEditor.useCallback[fitToContent]\"], [\n        placedEquipment,\n        equipmentDefinitions,\n        stageSize,\n        resetCanvas\n    ]);\n    // Zoom in function\n    const zoomIn = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[zoomIn]\": ()=>{\n            if (!stageRef.current) return;\n            const stage = stageRef.current;\n            const oldScale = stage.scaleX();\n            const scaleBy = 1.1;\n            const newScale = Math.min(5, oldScale * scaleBy) // Max zoom 5x\n            ;\n            // Zoom towards center of visible area\n            const center = {\n                x: stageSize.width / 2,\n                y: stageSize.height / 2\n            };\n            const mousePointTo = {\n                x: (center.x - stage.x()) / oldScale,\n                y: (center.y - stage.y()) / oldScale\n            };\n            const newPos = {\n                x: center.x - mousePointTo.x * newScale,\n                y: center.y - mousePointTo.y * newScale\n            };\n            stage.scale({\n                x: newScale,\n                y: newScale\n            });\n            stage.position(newPos);\n            stage.batchDraw();\n            setCanvasState({\n                scale: newScale,\n                x: newPos.x,\n                y: newPos.y\n            });\n        }\n    }[\"CanvasEditor.useCallback[zoomIn]\"], [\n        stageSize\n    ]);\n    // Zoom out function\n    const zoomOut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[zoomOut]\": ()=>{\n            if (!stageRef.current) return;\n            const stage = stageRef.current;\n            const oldScale = stage.scaleX();\n            const scaleBy = 1.1;\n            const newScale = Math.max(0.04, oldScale / scaleBy) // Min zoom 0.04x (4%)\n            ;\n            // Zoom towards center of visible area\n            const center = {\n                x: stageSize.width / 2,\n                y: stageSize.height / 2\n            };\n            const mousePointTo = {\n                x: (center.x - stage.x()) / oldScale,\n                y: (center.y - stage.y()) / oldScale\n            };\n            const newPos = {\n                x: center.x - mousePointTo.x * newScale,\n                y: center.y - mousePointTo.y * newScale\n            };\n            stage.scale({\n                x: newScale,\n                y: newScale\n            });\n            stage.position(newPos);\n            stage.batchDraw();\n            setCanvasState({\n                scale: newScale,\n                x: newPos.x,\n                y: newPos.y\n            });\n        }\n    }[\"CanvasEditor.useCallback[zoomOut]\"], [\n        stageSize\n    ]);\n    // Calculate visible bounds for performance optimization\n    const getVisibleBounds = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[getVisibleBounds]\": ()=>{\n            const buffer = 1000 // pixels buffer for smooth scrolling\n            ;\n            return {\n                minX: -canvasState.x / canvasState.scale - buffer,\n                maxX: (-canvasState.x + stageSize.width) / canvasState.scale + buffer,\n                minY: -canvasState.y / canvasState.scale - buffer,\n                maxY: (-canvasState.y + stageSize.height) / canvasState.scale + buffer\n            };\n        }\n    }[\"CanvasEditor.useCallback[getVisibleBounds]\"], [\n        canvasState.x,\n        canvasState.y,\n        canvasState.scale,\n        stageSize\n    ]);\n    // Handle measurement tool clicks\n    const handleMeasurementToolClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleMeasurementToolClick]\": (x, y)=>{\n            console.log('handleMeasurementToolClick called:', {\n                x,\n                y,\n                activeMeasurementTool\n            });\n            if (!activeMeasurementTool) return;\n            // Forward click to SimpleMeasurementTool via global handlers\n            const handlers = window.measurementToolHandlers;\n            console.log('Global handlers:', handlers);\n            if (handlers && handlers.handleClick) {\n                console.log('Calling handlers.handleClick');\n                handlers.handleClick(x, y);\n            } else {\n                console.log('No global handlers found');\n            }\n        }\n    }[\"CanvasEditor.useCallback[handleMeasurementToolClick]\"], [\n        activeMeasurementTool\n    ]);\n    // Handle double-click to complete area/perimeter measurements\n    const handleMeasurementToolDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\": (x, y)=>{\n            if (!activeMeasurementTool) return;\n            console.log('Double-click for measurement tool:', {\n                x,\n                y,\n                activeMeasurementTool\n            });\n            // Find incomplete measurement\n            const currentMeasurement = simpleMeasurements.find({\n                \"CanvasEditor.useCallback[handleMeasurementToolDoubleClick].currentMeasurement\": (m)=>!m.completed\n            }[\"CanvasEditor.useCallback[handleMeasurementToolDoubleClick].currentMeasurement\"]);\n            if (!currentMeasurement || currentMeasurement.points.length < 2) return;\n            let value = 0;\n            let label = '';\n            if (activeMeasurementTool === 'area') {\n                // Calculate area using shoelace formula\n                if (currentMeasurement.points.length < 3) return;\n                let area = 0;\n                const points = currentMeasurement.points;\n                const n = points.length;\n                for(let i = 0; i < n; i++){\n                    const j = (i + 1) % n;\n                    area += points[i].x * points[j].y;\n                    area -= points[j].x * points[i].y;\n                }\n                area = Math.abs(area) / 2;\n                value = area / (PIXELS_PER_FOOT * PIXELS_PER_FOOT // Convert to square feet\n                );\n                label = \"Area: \".concat(value.toFixed(0), \" sq ft\");\n            } else if (activeMeasurementTool === 'perimeter') {\n                // Calculate perimeter\n                let perimeter = 0;\n                const points = currentMeasurement.points;\n                for(let i = 0; i < points.length - 1; i++){\n                    const dx = points[i + 1].x - points[i].x;\n                    const dy = points[i + 1].y - points[i].y;\n                    perimeter += Math.sqrt(dx * dx + dy * dy);\n                }\n                // Close the perimeter (connect last point to first)\n                if (points.length > 2) {\n                    const dx = points[0].x - points[points.length - 1].x;\n                    const dy = points[0].y - points[points.length - 1].y;\n                    perimeter += Math.sqrt(dx * dx + dy * dy);\n                }\n                value = perimeter / PIXELS_PER_FOOT; // Convert to feet\n                label = \"Perimeter: \".concat(value.toFixed(0), \" ft\");\n            }\n            // Complete the measurement\n            const completedMeasurement = {\n                ...currentMeasurement,\n                value,\n                label,\n                completed: true\n            };\n            setSimpleMeasurements({\n                \"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\": (prev)=>prev.map({\n                        \"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\": (m)=>m.id === currentMeasurement.id ? completedMeasurement : m\n                    }[\"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\"])\n            }[\"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\"]);\n            console.log('Measurement completed:', completedMeasurement);\n        }\n    }[\"CanvasEditor.useCallback[handleMeasurementToolDoubleClick]\"], [\n        activeMeasurementTool,\n        simpleMeasurements,\n        PIXELS_PER_FOOT\n    ]);\n    // Enhanced measurement handlers\n    const handleEnhancedMeasurementPointSet = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\": (point)=>{\n            if (!currentMeasurement) return;\n            if (!currentMeasurement.firstPoint) {\n                // Set first point\n                setCurrentMeasurement({\n                    \"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\": (prev)=>prev ? {\n                            ...prev,\n                            firstPoint: point\n                        } : null\n                }[\"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\"]);\n            } else if (!currentMeasurement.secondPoint) {\n                // Set second point and complete measurement\n                const updatedMeasurement = {\n                    ...currentMeasurement,\n                    secondPoint: point,\n                    isComplete: true\n                };\n                setCurrentMeasurement(updatedMeasurement);\n                // Calculate distance and show calibration dialog\n                const dx = point.x - currentMeasurement.firstPoint.x;\n                const dy = point.y - currentMeasurement.firstPoint.y;\n                const pixelDistance = Math.sqrt(dx * dx + dy * dy);\n                const calculatedDistance = pixelDistance / PIXELS_PER_FOOT;\n                // Show calibration dialog after a short delay\n                setTimeout({\n                    \"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\": ()=>{\n                        setShowCalibrateDialog(true);\n                    }\n                }[\"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\"], 500);\n            }\n        }\n    }[\"CanvasEditor.useCallback[handleEnhancedMeasurementPointSet]\"], [\n        currentMeasurement,\n        PIXELS_PER_FOOT\n    ]);\n    const handleEnhancedMeasurementEdit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleEnhancedMeasurementEdit]\": (firstPoint, secondPoint)=>{\n            if (!currentMeasurement) return;\n            setCurrentMeasurement({\n                \"CanvasEditor.useCallback[handleEnhancedMeasurementEdit]\": (prev)=>prev ? {\n                        ...prev,\n                        firstPoint,\n                        secondPoint\n                    } : null\n            }[\"CanvasEditor.useCallback[handleEnhancedMeasurementEdit]\"]);\n        }\n    }[\"CanvasEditor.useCallback[handleEnhancedMeasurementEdit]\"], [\n        currentMeasurement\n    ]);\n    const handleCalibrateSubmit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleCalibrateSubmit]\": (actualDistance)=>{\n            if (!currentMeasurement || !currentMeasurement.firstPoint || !currentMeasurement.secondPoint) return;\n            // Calculate the scale factor\n            const dx = currentMeasurement.secondPoint.x - currentMeasurement.firstPoint.x;\n            const dy = currentMeasurement.secondPoint.y - currentMeasurement.firstPoint.y;\n            const pixelDistance = Math.sqrt(dx * dx + dy * dy);\n            const scaleFactor = actualDistance / (pixelDistance / PIXELS_PER_FOOT);\n            // Update the measurement with real-world distance\n            setCurrentMeasurement({\n                \"CanvasEditor.useCallback[handleCalibrateSubmit]\": (prev)=>prev ? {\n                        ...prev,\n                        realWorldDistance: actualDistance\n                    } : null\n            }[\"CanvasEditor.useCallback[handleCalibrateSubmit]\"]);\n            // Apply scale calibration to background images if any\n            if (backgroundImages && backgroundImages.length > 0 && onBackgroundImageUpdate) {\n                backgroundImages.forEach({\n                    \"CanvasEditor.useCallback[handleCalibrateSubmit]\": (image)=>{\n                        onBackgroundImageUpdate(image.id, {\n                            scaleX: (image.scaleX || 1) * scaleFactor,\n                            scaleY: (image.scaleY || 1) * scaleFactor\n                        });\n                    }\n                }[\"CanvasEditor.useCallback[handleCalibrateSubmit]\"]);\n            }\n            setShowCalibrateDialog(false);\n            console.log('Scale calibrated with factor:', scaleFactor);\n        }\n    }[\"CanvasEditor.useCallback[handleCalibrateSubmit]\"], [\n        currentMeasurement,\n        PIXELS_PER_FOOT,\n        backgroundImages,\n        onBackgroundImageUpdate\n    ]);\n    const handleCalibrateEdit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleCalibrateEdit]\": ()=>{\n            setShowCalibrateDialog(false);\n            setMeasurementEditMode(true);\n        }\n    }[\"CanvasEditor.useCallback[handleCalibrateEdit]\"], []);\n    const handleCalibrateCancel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleCalibrateCancel]\": ()=>{\n            setShowCalibrateDialog(false);\n            // Optionally reset the measurement\n            setCurrentMeasurement(null);\n            setMeasurementToolActive(false);\n        }\n    }[\"CanvasEditor.useCallback[handleCalibrateCancel]\"], []);\n    // Handle canvas clicks for measurement tools\n    const handleCanvasClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleCanvasClick]\": (x, y)=>{\n            if (!activeMeasurementTool) return;\n            console.log('Canvas click for measurement tool (raw):', {\n                x,\n                y,\n                activeMeasurementTool\n            });\n            // Transform screen coordinates to canvas coordinates\n            // Account for canvas zoom and pan\n            const canvasX = (x - canvasState.x) / canvasState.scale;\n            const canvasY = (y - canvasState.y) / canvasState.scale;\n            console.log('Canvas click for measurement tool (transformed):', {\n                canvasX,\n                canvasY,\n                canvasState\n            });\n            const newPoint = {\n                x: canvasX,\n                y: canvasY\n            };\n            if (simpleMeasurements.some({\n                \"CanvasEditor.useCallback[handleCanvasClick]\": (m)=>!m.completed\n            }[\"CanvasEditor.useCallback[handleCanvasClick]\"])) {\n                // Continue existing measurement\n                const currentMeasurement = simpleMeasurements.find({\n                    \"CanvasEditor.useCallback[handleCanvasClick].currentMeasurement\": (m)=>!m.completed\n                }[\"CanvasEditor.useCallback[handleCanvasClick].currentMeasurement\"]);\n                if (currentMeasurement) {\n                    const updatedPoints = [\n                        ...currentMeasurement.points,\n                        newPoint\n                    ];\n                    // For distance tool, complete after 2 points\n                    if (activeMeasurementTool === 'distance' && updatedPoints.length === 2) {\n                        const distance = Math.sqrt(Math.pow(updatedPoints[1].x - updatedPoints[0].x, 2) + Math.pow(updatedPoints[1].y - updatedPoints[0].y, 2)) / PIXELS_PER_FOOT;\n                        const completedMeasurement = {\n                            ...currentMeasurement,\n                            points: updatedPoints,\n                            value: distance,\n                            label: \"Distance: \".concat(distance.toFixed(0), \" ft\"),\n                            completed: true\n                        };\n                        setSimpleMeasurements({\n                            \"CanvasEditor.useCallback[handleCanvasClick]\": (prev)=>prev.map({\n                                    \"CanvasEditor.useCallback[handleCanvasClick]\": (m)=>m.id === currentMeasurement.id ? completedMeasurement : m\n                                }[\"CanvasEditor.useCallback[handleCanvasClick]\"])\n                        }[\"CanvasEditor.useCallback[handleCanvasClick]\"]);\n                    } else {\n                        // Update current measurement with new point\n                        setSimpleMeasurements({\n                            \"CanvasEditor.useCallback[handleCanvasClick]\": (prev)=>prev.map({\n                                    \"CanvasEditor.useCallback[handleCanvasClick]\": (m)=>m.id === currentMeasurement.id ? {\n                                            ...m,\n                                            points: updatedPoints\n                                        } : m\n                                }[\"CanvasEditor.useCallback[handleCanvasClick]\"])\n                        }[\"CanvasEditor.useCallback[handleCanvasClick]\"]);\n                    }\n                }\n            } else {\n                // Start new measurement\n                const newMeasurement = {\n                    id: \"\".concat(activeMeasurementTool, \"-\").concat(Date.now()),\n                    type: activeMeasurementTool,\n                    points: [\n                        newPoint\n                    ],\n                    value: 0,\n                    label: '',\n                    completed: false\n                };\n                setSimpleMeasurements({\n                    \"CanvasEditor.useCallback[handleCanvasClick]\": (prev)=>[\n                            ...prev,\n                            newMeasurement\n                        ]\n                }[\"CanvasEditor.useCallback[handleCanvasClick]\"]);\n            }\n        }\n    }[\"CanvasEditor.useCallback[handleCanvasClick]\"], [\n        activeMeasurementTool,\n        simpleMeasurements,\n        PIXELS_PER_FOOT\n    ]);\n    // Handle stage click to deselect equipment when clicking on empty canvas\n    const handleStageClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleStageClick]\": (e)=>{\n            // Check if we clicked on the stage itself (not on any equipment)\n            const clickedOnEmpty = e.target === e.target.getStage();\n            if (clickedOnEmpty) {\n                const stage = e.target.getStage();\n                const pos = stage.getPointerPosition();\n                // If enhanced measurement tool is active, handle the click\n                if (measurementToolActive && !activeMeasurementTool && pos) {\n                    const canvasX = (pos.x - canvasState.x) / canvasState.scale;\n                    const canvasY = (pos.y - canvasState.y) / canvasState.scale;\n                    // Forward to enhanced measurement handlers\n                    const handlers = window.enhancedMeasurementHandlers;\n                    if (handlers && handlers.handleClick) {\n                        handlers.handleClick({\n                            target: {\n                                getStage: {\n                                    \"CanvasEditor.useCallback[handleStageClick]\": ()=>stage\n                                }[\"CanvasEditor.useCallback[handleStageClick]\"]\n                            }\n                        });\n                    }\n                    return;\n                }\n                // If a simple measurement tool is active, handle the click for measurement\n                if (activeMeasurementTool && pos) {\n                    handleCanvasClick(pos.x, pos.y);\n                    return;\n                }\n                // Otherwise, deselect equipment\n                onEquipmentSelect === null || onEquipmentSelect === void 0 ? void 0 : onEquipmentSelect(null);\n                setSelectedBackgroundImageId(null);\n            }\n        }\n    }[\"CanvasEditor.useCallback[handleStageClick]\"], [\n        onEquipmentSelect,\n        activeMeasurementTool,\n        measurementToolActive,\n        handleCanvasClick,\n        canvasState\n    ]);\n    // Handle stage double click for measurement tools\n    const handleStageDoubleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleStageDoubleClick]\": (e)=>{\n            if (!activeMeasurementTool) return;\n            const stage = e.target.getStage();\n            const pos = stage.getPointerPosition();\n            if (pos) {\n                // Transform screen coordinates to canvas coordinates\n                const canvasX = (pos.x - canvasState.x) / canvasState.scale;\n                const canvasY = (pos.y - canvasState.y) / canvasState.scale;\n                console.log('Double-click for measurement tool:', {\n                    x: canvasX,\n                    y: canvasY,\n                    activeMeasurementTool\n                });\n                // Complete the current measurement\n                setSimpleMeasurements({\n                    \"CanvasEditor.useCallback[handleStageDoubleClick]\": (prev)=>{\n                        const currentMeasurement = prev.find({\n                            \"CanvasEditor.useCallback[handleStageDoubleClick].currentMeasurement\": (m)=>!m.completed\n                        }[\"CanvasEditor.useCallback[handleStageDoubleClick].currentMeasurement\"]);\n                        if (!currentMeasurement) return prev;\n                        // Add the final point for area and perimeter measurements\n                        if (activeMeasurementTool === 'area' || activeMeasurementTool === 'perimeter') {\n                            const updatedPoints = [\n                                ...currentMeasurement.points,\n                                {\n                                    x: canvasX,\n                                    y: canvasY\n                                }\n                            ];\n                            // Calculate the measurement value\n                            let value = 0;\n                            let label = '';\n                            if (activeMeasurementTool === 'area' && updatedPoints.length >= 3) {\n                                // Calculate area using shoelace formula\n                                let area = 0;\n                                for(let i = 0; i < updatedPoints.length; i++){\n                                    const j = (i + 1) % updatedPoints.length;\n                                    area += updatedPoints[i].x * updatedPoints[j].y;\n                                    area -= updatedPoints[j].x * updatedPoints[i].y;\n                                }\n                                area = Math.abs(area) / 2;\n                                // Convert from pixels to square feet\n                                const areaInSqFt = area / (PIXELS_PER_FOOT * PIXELS_PER_FOOT);\n                                value = Math.round(areaInSqFt);\n                                label = \"Area: \".concat(value.toLocaleString(), \" sq ft\");\n                            } else if (activeMeasurementTool === 'perimeter' && updatedPoints.length >= 2) {\n                                // Calculate perimeter (sum of all segments + closing segment)\n                                let perimeter = 0;\n                                for(let i = 0; i < updatedPoints.length - 1; i++){\n                                    const dx = updatedPoints[i + 1].x - updatedPoints[i].x;\n                                    const dy = updatedPoints[i + 1].y - updatedPoints[i].y;\n                                    perimeter += Math.sqrt(dx * dx + dy * dy);\n                                }\n                                // Add closing segment\n                                const dx = updatedPoints[0].x - updatedPoints[updatedPoints.length - 1].x;\n                                const dy = updatedPoints[0].y - updatedPoints[updatedPoints.length - 1].y;\n                                perimeter += Math.sqrt(dx * dx + dy * dy);\n                                // Convert from pixels to feet\n                                const perimeterInFt = perimeter / PIXELS_PER_FOOT;\n                                value = Math.round(perimeterInFt);\n                                label = \"Perimeter: \".concat(value.toLocaleString(), \" ft\");\n                            }\n                            console.log('Measurement completed:', {\n                                id: currentMeasurement.id,\n                                value,\n                                label,\n                                completed: true\n                            });\n                            return prev.map({\n                                \"CanvasEditor.useCallback[handleStageDoubleClick]\": (m)=>m.id === currentMeasurement.id ? {\n                                        ...m,\n                                        points: updatedPoints,\n                                        value,\n                                        label,\n                                        completed: true\n                                    } : m\n                            }[\"CanvasEditor.useCallback[handleStageDoubleClick]\"]);\n                        }\n                        return prev;\n                    }\n                }[\"CanvasEditor.useCallback[handleStageDoubleClick]\"]);\n                // Deactivate the measurement tool\n                setActiveMeasurementTool(null);\n            }\n        }\n    }[\"CanvasEditor.useCallback[handleStageDoubleClick]\"], [\n        activeMeasurementTool,\n        canvasState,\n        PIXELS_PER_FOOT\n    ]);\n    // Background image management functions\n    const handleBackgroundImageAdd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"CanvasEditor.useCallback[handleBackgroundImageAdd]\": (image)=>{\n            const imageWithId = {\n                ...image,\n                id: \"bg-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9))\n            };\n            onBackgroundImageAdd === null || onBackgroundImageAdd === void 0 ? void 0 : onBackgroundImageAdd(imageWithId);\n        }\n    }[\"CanvasEditor.useCallback[handleBackgroundImageAdd]\"], [\n        onBackgroundImageAdd\n    ]);\n    const handleBackgroundImageSelect = (imageId)=>{\n        setSelectedBackgroundImageId(imageId);\n    };\n    const calibrateImageScale = (actualDistance, calculatedDistance)=>{\n        // Calculate the scale correction factor\n        const scaleCorrection = actualDistance / calculatedDistance;\n        // Apply the correction to all background images\n        backgroundImages.forEach((image)=>{\n            if (onBackgroundImageUpdate) {\n                onBackgroundImageUpdate(image.id, {\n                    scaleX: image.scaleX * scaleCorrection,\n                    scaleY: image.scaleY * scaleCorrection\n                });\n            }\n        });\n        console.log(\"Scale calibrated: \".concat(scaleCorrection.toFixed(3), \"x correction applied to \").concat(backgroundImages.length, \" background images\"));\n    };\n    const handleShowDistanceInput = (calculatedDistance, onSubmit, onCancel)=>{\n        setDistanceInputData({\n            calculatedDistance,\n            onSubmit: (actualDistance)=>{\n                // Calibrate the image scale automatically\n                calibrateImageScale(actualDistance, calculatedDistance);\n                onSubmit(actualDistance);\n                setShowDistanceInput(false);\n                setDistanceInputData(null);\n            },\n            onCancel: ()=>{\n                onCancel();\n                setShowDistanceInput(false);\n                setDistanceInputData(null);\n            }\n        });\n        setShowDistanceInput(true);\n    };\n    // Ensure client-side only rendering to prevent hydration mismatches\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"CanvasEditor.useEffect\": ()=>{\n            setIsClient(true);\n        }\n    }[\"CanvasEditor.useEffect\"], []);\n    // Don't render canvas during SSR to prevent hydration mismatches\n    if (!isClient) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"relative w-full h-full \".concat(className, \" flex items-center justify-center bg-gray-50\"),\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-gray-500\",\n                children: \"Loading canvas...\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 790,\n                columnNumber: 9\n            }, undefined)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n            lineNumber: 789,\n            columnNumber: 7\n        }, undefined);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full \".concat(className, \" flex flex-col\"),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-4 right-4 z-10 flex flex-col gap-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: resetCanvas,\n                        className: \"px-3 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900\",\n                        title: \"Reset View\",\n                        children: \"Reset\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 799,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: fitToContent,\n                        className: \"px-3 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900\",\n                        title: \"Fit to Content\",\n                        children: \"Fit\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 806,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex items-center space-x-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex space-x-1\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: zoomIn,\n                                        className: \"flex-1 px-6 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900 text-center\",\n                                        title: \"Zoom In\",\n                                        children: \"+\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                        lineNumber: 817,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        onClick: zoomOut,\n                                        className: \"flex-1 px-6 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900 text-center\",\n                                        title: \"Zoom Out\",\n                                        children: \"−\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                        lineNumber: 824,\n                                        columnNumber: 13\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 816,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"text-sm text-gray-900 font-medium bg-white px-3 py-1 rounded border border-gray-300 shadow text-center flex items-center justify-center\",\n                                children: [\n                                    \"Zoom (\",\n                                    Math.round(canvasState.scale * 100),\n                                    \"%)\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 834,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    if (!stageRef.current) return;\n                                    const stage = stageRef.current;\n                                    // If there are background images, fit the largest one; otherwise fit canvas\n                                    if (backgroundImages && backgroundImages.length > 0) {\n                                        // Find the largest background image dimensions\n                                        let maxWidth = 0;\n                                        let maxHeight = 0;\n                                        let targetImage = null;\n                                        backgroundImages.forEach((img)=>{\n                                            const imgWidth = (img.width || 0) * (img.scaleX || 1);\n                                            const imgHeight = (img.height || 0) * (img.scaleY || 1);\n                                            const imgArea = imgWidth * imgHeight;\n                                            const currentMaxArea = maxWidth * maxHeight;\n                                            if (imgArea > currentMaxArea) {\n                                                maxWidth = imgWidth;\n                                                maxHeight = imgHeight;\n                                                targetImage = img;\n                                            }\n                                        });\n                                        if (maxWidth > 0 && maxHeight > 0) {\n                                            // Calculate scale to fit the largest background image\n                                            const scaleX = stageSize.width / maxWidth;\n                                            const scaleY = stageSize.height / maxHeight;\n                                            const fitScale = Math.min(scaleX, scaleY) * 0.9 // 90% padding\n                                            ;\n                                            // Center the image in the viewport\n                                            const centerX = (stageSize.width - maxWidth * fitScale) / 2;\n                                            const centerY = (stageSize.height - maxHeight * fitScale) / 2;\n                                            // If image has position, account for it\n                                            const adjustedX = centerX - ((targetImage === null || targetImage === void 0 ? void 0 : targetImage.x) || 0) * fitScale;\n                                            const adjustedY = centerY - ((targetImage === null || targetImage === void 0 ? void 0 : targetImage.y) || 0) * fitScale;\n                                            stage.scale({\n                                                x: fitScale,\n                                                y: fitScale\n                                            });\n                                            stage.position({\n                                                x: adjustedX,\n                                                y: adjustedY\n                                            });\n                                            stage.batchDraw();\n                                            setCanvasState({\n                                                scale: fitScale,\n                                                x: adjustedX,\n                                                y: adjustedY\n                                            });\n                                            console.log(\"Max Out: Fit satellite image (\".concat(Math.round(maxWidth), \"x\").concat(Math.round(maxHeight), \"px) in viewport (\").concat(stageSize.width, \"x\").concat(stageSize.height, \"px) at \").concat(Math.round(fitScale * 100), \"% zoom\"));\n                                            return;\n                                        }\n                                    }\n                                    // Fallback: fit entire canvas if no background images\n                                    const scaleX = stageSize.width / CANVAS_SIZE_PIXELS;\n                                    const scaleY = stageSize.height / CANVAS_SIZE_PIXELS;\n                                    const fitScale = Math.min(scaleX, scaleY) * 0.9 // 90% to add some padding\n                                    ;\n                                    // Center the canvas in the viewport\n                                    const centerX = (stageSize.width - CANVAS_SIZE_PIXELS * fitScale) / 2;\n                                    const centerY = (stageSize.height - CANVAS_SIZE_PIXELS * fitScale) / 2;\n                                    stage.scale({\n                                        x: fitScale,\n                                        y: fitScale\n                                    });\n                                    stage.position({\n                                        x: centerX,\n                                        y: centerY\n                                    });\n                                    stage.batchDraw();\n                                    setCanvasState({\n                                        scale: fitScale,\n                                        x: centerX,\n                                        y: centerY\n                                    });\n                                    console.log(\"Max Out: Fit entire canvas (\".concat(CANVAS_SIZE_PIXELS, \"px) in viewport (\").concat(stageSize.width, \"x\").concat(stageSize.height, \"px) at \").concat(Math.round(fitScale * 100), \"% zoom\"));\n                                },\n                                className: \"px-3 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900 text-center\",\n                                title: \"Fit Entire Satellite Image in View\",\n                                children: \"Max Out\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 839,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 815,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setGridVisible(!gridVisible),\n                        className: \"px-3 py-1 border rounded shadow text-sm \".concat(gridVisible ? 'bg-blue-500 text-white border-blue-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'),\n                        title: \"Toggle Grid\",\n                        children: \"Grid\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 921,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setBackgroundManagerOpen(true),\n                        className: \"px-3 py-1 bg-white border border-gray-300 rounded shadow hover:bg-gray-50 text-sm text-gray-900\",\n                        title: \"Manage Background Images\",\n                        children: \"Images\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 932,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setScaleBarVisible(!scaleBarVisible),\n                        className: \"px-3 py-1 border rounded shadow text-sm \".concat(scaleBarVisible ? 'bg-green-500 text-white border-green-500' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'),\n                        title: \"Toggle Scale Bar\",\n                        children: \"Scale\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 939,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex space-x-1\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    if (measurementToolActive) {\n                                        // Reset measurement if already active\n                                        setCurrentMeasurement(null);\n                                        setMeasurementToolActive(false);\n                                        setMeasurementEditMode(false);\n                                    } else {\n                                        // Start new measurement\n                                        setCurrentMeasurement({\n                                            id: Date.now().toString(),\n                                            firstPoint: null,\n                                            secondPoint: null,\n                                            isComplete: false\n                                        });\n                                        setMeasurementToolActive(true);\n                                        setMeasurementEditMode(false);\n                                    }\n                                },\n                                className: \"px-3 py-1 border rounded shadow text-sm transition-colors \".concat(measurementToolActive && !measurementEditMode ? 'bg-orange-500 text-white border-orange-500' : 'bg-white text-gray-900 border-gray-300 hover:bg-gray-50'),\n                                title: \"Start New Measurement\",\n                                children: \"\\uD83D\\uDCCF Measure\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 952,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    if (currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete) {\n                                        setMeasurementEditMode(!measurementEditMode);\n                                    }\n                                },\n                                disabled: !(currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete),\n                                className: \"px-3 py-1 border rounded shadow text-sm transition-colors \".concat(measurementEditMode ? 'bg-blue-500 text-white border-blue-500' : (currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete) ? 'bg-white text-gray-900 border-gray-300 hover:bg-gray-50' : 'bg-gray-200 text-gray-400 border-gray-200 cursor-not-allowed'),\n                                title: \"Edit Measurement Line\",\n                                children: \"✏️ Edit\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 981,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    if (currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete) {\n                                        setShowCalibrateDialog(true);\n                                    }\n                                },\n                                disabled: !(currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete),\n                                className: \"px-3 py-1 border rounded shadow text-sm transition-colors \".concat((currentMeasurement === null || currentMeasurement === void 0 ? void 0 : currentMeasurement.isComplete) ? 'bg-white text-gray-900 border-gray-300 hover:bg-gray-50' : 'bg-gray-200 text-gray-400 border-gray-200 cursor-not-allowed'),\n                                title: \"Calibrate Scale\",\n                                children: \"\\uD83C\\uDFAF Calibrate\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 1000,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 951,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex space-x-1\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setActiveMeasurementTool(activeMeasurementTool === 'area' ? null : 'area'),\n                                className: \"px-3 py-2 rounded text-sm font-medium transition-colors \".concat(activeMeasurementTool === 'area' ? 'bg-green-500 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'),\n                                title: \"Area Measurement Tool\",\n                                children: \"\\uD83D\\uDCD0 Area\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 1020,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setActiveMeasurementTool(activeMeasurementTool === 'perimeter' ? null : 'perimeter'),\n                                className: \"px-3 py-2 rounded text-sm font-medium transition-colors \".concat(activeMeasurementTool === 'perimeter' ? 'bg-blue-500 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'),\n                                title: \"Perimeter Measurement Tool\",\n                                children: \"\\uD83D\\uDCCF Perimeter\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 1032,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>setActiveMeasurementTool(activeMeasurementTool === 'distance' ? null : 'distance'),\n                                className: \"px-3 py-2 rounded text-sm font-medium transition-colors \".concat(activeMeasurementTool === 'distance' ? 'bg-amber-500 text-white' : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'),\n                                title: \"Distance Measurement Tool\",\n                                children: \"\\uD83D\\uDCCF Distance\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                                lineNumber: 1044,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                        lineNumber: 1019,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 798,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Stage, {\n                ref: stageRef,\n                width: stageSize.width,\n                height: stageSize.height,\n                draggable: !measurementToolActive && !activeMeasurementTool,\n                onWheel: handleWheel,\n                onDragEnd: handleDragEnd,\n                onClick: handleStageClick,\n                onDblClick: handleStageDoubleClick,\n                className: \"border border-gray-300 bg-gray-50 flex-1\",\n                onContentMouseDown: ()=>{\n                    // Ensure canvas element is captured after stage is fully mounted\n                    if (stageRef.current && onCanvasReady) {\n                        const container = stageRef.current.container();\n                        if (container) {\n                            console.log('Stage mounted, capturing canvas element:', container);\n                            onCanvasReady(container);\n                        }\n                    }\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Layer, {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_BackgroundLayer__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                            images: backgroundImages,\n                            onImageUpdate: onBackgroundImageUpdate,\n                            onImageDelete: onBackgroundImageDelete,\n                            onImageSelect: handleBackgroundImageSelect,\n                            selectedImageId: selectedBackgroundImageId,\n                            scale: canvasState.scale,\n                            editable: true\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1086,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_GridLayer__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                            width: CANVAS_SIZE_PIXELS,\n                            height: CANVAS_SIZE_PIXELS,\n                            scale: canvasState.scale,\n                            x: canvasState.x,\n                            y: canvasState.y,\n                            visible: gridVisible,\n                            gridSize: PIXELS_PER_FOOT\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1097,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_EquipmentLayer__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                            equipment: placedEquipment,\n                            equipmentDefinitions: equipmentDefinitions,\n                            scale: canvasState.scale,\n                            onEquipmentSelect: onEquipmentSelect,\n                            onEquipmentMove: onEquipmentMove,\n                            onEquipmentRotate: onEquipmentRotate,\n                            onEquipmentDelete: onEquipmentDelete,\n                            selectedEquipmentId: selectedEquipmentId,\n                            snapToGrid: true,\n                            gridSize: PIXELS_PER_FOOT\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1108,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_EnhancedMeasurementTool__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                            isActive: measurementToolActive && !activeMeasurementTool,\n                            editMode: measurementEditMode,\n                            scale: canvasState.scale,\n                            pixelsPerFoot: PIXELS_PER_FOOT,\n                            currentMeasurement: currentMeasurement,\n                            onPointSet: handleEnhancedMeasurementPointSet,\n                            onMeasurementComplete: (distance)=>{\n                                console.log('Enhanced measurement completed:', distance);\n                            },\n                            onMeasurementEdit: handleEnhancedMeasurementEdit\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1122,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MeasurementTool__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                            isActive: false,\n                            scale: canvasState.scale,\n                            pixelsPerFoot: PIXELS_PER_FOOT,\n                            onMeasurementComplete: (measurement)=>{\n                                setMeasurements((prev)=>[\n                                        ...prev,\n                                        measurement\n                                    ]);\n                                console.log('New measurement:', measurement);\n                            },\n                            onShowDistanceInput: handleShowDistanceInput\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1136,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_SimpleMeasurementTool__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                            activeTool: activeMeasurementTool,\n                            scale: canvasState.scale,\n                            pixelsPerFoot: PIXELS_PER_FOOT,\n                            measurements: simpleMeasurements,\n                            onMeasurementComplete: (measurement)=>{\n                                setSimpleMeasurements((prev)=>[\n                                        ...prev,\n                                        measurement\n                                    ]);\n                            },\n                            onMeasurementDelete: (id)=>{\n                                setSimpleMeasurements((prev)=>prev.filter((m)=>m.id !== id));\n                            }\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1148,\n                            columnNumber: 11\n                        }, undefined),\n                        scaleBarVisible && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ScaleBar__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                            scale: canvasState.scale,\n                            canvasWidth: stageSize.width,\n                            canvasHeight: stageSize.height,\n                            pixelsPerFoot: PIXELS_PER_FOOT\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                            lineNumber: 1163,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                    lineNumber: 1084,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 1063,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_BackgroundImageManager__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                images: backgroundImages,\n                onImageAdd: handleBackgroundImageAdd,\n                onImageUpdate: onBackgroundImageUpdate || (()=>{}),\n                onImageDelete: onBackgroundImageDelete || (()=>{}),\n                onImageSelect: handleBackgroundImageSelect,\n                selectedImageId: selectedBackgroundImageId,\n                isOpen: backgroundManagerOpen,\n                onClose: ()=>setBackgroundManagerOpen(false)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 1174,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_DistanceInputModal__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                isOpen: showDistanceInput,\n                calculatedDistance: (distanceInputData === null || distanceInputData === void 0 ? void 0 : distanceInputData.calculatedDistance) || 0,\n                onSubmit: (distanceInputData === null || distanceInputData === void 0 ? void 0 : distanceInputData.onSubmit) || (()=>{}),\n                onCancel: (distanceInputData === null || distanceInputData === void 0 ? void 0 : distanceInputData.onCancel) || (()=>{})\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 1186,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_EnhancedCalibrateDialog__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                isOpen: showCalibrateDialog,\n                calculatedDistance: currentMeasurement && currentMeasurement.firstPoint && currentMeasurement.secondPoint ? Math.sqrt(Math.pow(currentMeasurement.secondPoint.x - currentMeasurement.firstPoint.x, 2) + Math.pow(currentMeasurement.secondPoint.y - currentMeasurement.firstPoint.y, 2)) / PIXELS_PER_FOOT : 0,\n                onSubmit: handleCalibrateSubmit,\n                onEdit: handleCalibrateEdit,\n                onCancel: handleCalibrateCancel\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n                lineNumber: 1194,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\scale\\\\CascadeProjects\\\\FrazierShows Apps\\\\Lot Planner\\\\src\\\\components\\\\canvas\\\\CanvasEditor.tsx\",\n        lineNumber: 796,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CanvasEditor, \"FD1N4juQo+zangP88CLFAsmwu1w=\");\n_c = CanvasEditor;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanvasEditor);\nvar _c;\n$RefreshReg$(_c, \"CanvasEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2NhbnZhcy9DYW52YXNFZGl0b3IudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRXVFO0FBQzdCO0FBRVA7QUFDVTtBQUN1QjtBQUNQO0FBQzVCO0FBQ29DO0FBQ2hCO0FBQzZCO0FBQ25CO0FBQ0E7QUE0Qi9ELE1BQU1pQixlQUE0QztRQUFDLEVBQ2pEQyxRQUFRLElBQUksRUFDWkMsU0FBUyxHQUFHLEVBQ1pDLFlBQVksRUFBRSxFQUNkQyxjQUFjLEVBQ2RDLGtCQUFrQixFQUFFLEVBQ3BCQyxvQkFBb0IsRUFDcEJDLGlCQUFpQixFQUNqQkMsZUFBZSxFQUNmQyxpQkFBaUIsRUFDakJDLGlCQUFpQixFQUNqQkMsbUJBQW1CLEVBQ25CQyxtQkFBbUIsRUFBRSxFQUNyQkMsb0JBQW9CLEVBQ3BCQyx1QkFBdUIsRUFDdkJDLHVCQUF1QixFQUN2QkMsYUFBYSxFQUNkOztJQUNDLE1BQU1DLFdBQVdqQyw2Q0FBTUEsQ0FBYztJQUNyQyxNQUFNLENBQUNrQyxVQUFVQyxZQUFZLEdBQUdqQywrQ0FBUUEsQ0FBQztJQUV6Qyw2REFBNkQ7SUFDN0QsTUFBTWtDLG9CQUFvQjtJQUMxQixNQUFNQyxpQkFBaUJDLEtBQUtDLElBQUksQ0FBQ0gsbUJBQW1CLFlBQVk7O0lBQ2hFLE1BQU1JLGtCQUFrQixHQUFHLG1EQUFtRDs7SUFDOUUsTUFBTUMscUJBQXFCSixpQkFBaUJHLGdCQUFnQixlQUFlOztJQUUzRSxNQUFNLENBQUNFLGFBQWFDLGVBQWUsR0FBR3pDLCtDQUFRQSxDQUFjO1FBQzFEMEMsT0FBTztRQUNQQyxHQUFHO1FBQ0hDLEdBQUc7SUFDTDtJQUNBLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHOUMsK0NBQVFBLENBQUM7UUFBRWU7UUFBT0M7SUFBTztJQUMzRCxNQUFNLENBQUMrQixhQUFhQyxlQUFlLEdBQUdoRCwrQ0FBUUEsQ0FBQztJQUMvQyxNQUFNLENBQUNpRCx1QkFB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RUFBZUEsWUFBWUEsRUFBQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxzY2FsZVxcQ2FzY2FkZVByb2plY3RzXFxGcmF6aWVyU2hvd3MgQXBwc1xcTG90IFBsYW5uZXJcXHNyY1xcY29tcG9uZW50c1xcY2FudmFzXFxDYW52YXNFZGl0b3IudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgU3RhZ2UsIExheWVyIH0gZnJvbSAncmVhY3Qta29udmEnXG5pbXBvcnQgS29udmEgZnJvbSAna29udmEnXG5pbXBvcnQgR3JpZExheWVyIGZyb20gJy4vR3JpZExheWVyJ1xuaW1wb3J0IEVxdWlwbWVudExheWVyIGZyb20gJy4vRXF1aXBtZW50TGF5ZXInXG5pbXBvcnQgQmFja2dyb3VuZExheWVyLCB7IEJhY2tncm91bmRJbWFnZSB9IGZyb20gJy4vQmFja2dyb3VuZExheWVyJ1xuaW1wb3J0IEJhY2tncm91bmRJbWFnZU1hbmFnZXIgZnJvbSAnLi9CYWNrZ3JvdW5kSW1hZ2VNYW5hZ2VyJ1xuaW1wb3J0IFNjYWxlQmFyIGZyb20gJy4vU2NhbGVCYXInXG5pbXBvcnQgTWVhc3VyZW1lbnRUb29sLCB7IHR5cGUgTWVhc3VyZW1lbnQgfSBmcm9tICcuL01lYXN1cmVtZW50VG9vbCdcbmltcG9ydCBEaXN0YW5jZUlucHV0TW9kYWwgZnJvbSAnLi9EaXN0YW5jZUlucHV0TW9kYWwnXG5pbXBvcnQgU2ltcGxlTWVhc3VyZW1lbnRUb29sLCB7IFNpbXBsZU1lYXN1cmVtZW50IH0gZnJvbSAnLi9TaW1wbGVNZWFzdXJlbWVudFRvb2wnXG5pbXBvcnQgRW5oYW5jZWRNZWFzdXJlbWVudFRvb2wgZnJvbSAnLi9FbmhhbmNlZE1lYXN1cmVtZW50VG9vbCdcbmltcG9ydCBFbmhhbmNlZENhbGlicmF0ZURpYWxvZyBmcm9tICcuL0VuaGFuY2VkQ2FsaWJyYXRlRGlhbG9nJ1xuaW1wb3J0IHsgUGxhY2VkRXF1aXBtZW50LCBFcXVpcG1lbnRJdGVtIH0gZnJvbSAnQC9saWIvZXF1aXBtZW50L3R5cGVzJ1xuXG5pbnRlcmZhY2UgQ2FudmFzRWRpdG9yUHJvcHMge1xuICB3aWR0aD86IG51bWJlclxuICBoZWlnaHQ/OiBudW1iZXJcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIG9uRXF1aXBtZW50QWRkPzogKGVxdWlwbWVudDogRXF1aXBtZW50SXRlbSwgeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHZvaWRcbiAgcGxhY2VkRXF1aXBtZW50PzogUGxhY2VkRXF1aXBtZW50W11cbiAgZXF1aXBtZW50RGVmaW5pdGlvbnM/OiBFcXVpcG1lbnRJdGVtW11cbiAgb25FcXVpcG1lbnRTZWxlY3Q/OiAoZXF1aXBtZW50OiBQbGFjZWRFcXVpcG1lbnQgfCBudWxsKSA9PiB2b2lkXG4gIG9uRXF1aXBtZW50TW92ZT86IChlcXVpcG1lbnRJZDogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gdm9pZFxuICBvbkVxdWlwbWVudFJvdGF0ZT86IChlcXVpcG1lbnRJZDogc3RyaW5nLCByb3RhdGlvbjogbnVtYmVyKSA9PiB2b2lkXG4gIG9uRXF1aXBtZW50RGVsZXRlPzogKGVxdWlwbWVudElkOiBzdHJpbmcpID0+IHZvaWRcbiAgc2VsZWN0ZWRFcXVpcG1lbnRJZD86IHN0cmluZ1xuICBiYWNrZ3JvdW5kSW1hZ2VzPzogQmFja2dyb3VuZEltYWdlW11cbiAgb25CYWNrZ3JvdW5kSW1hZ2VBZGQ/OiAoaW1hZ2U6IE9taXQ8QmFja2dyb3VuZEltYWdlLCAnaWQnPikgPT4gdm9pZFxuICBvbkJhY2tncm91bmRJbWFnZVVwZGF0ZT86IChpbWFnZUlkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8QmFja2dyb3VuZEltYWdlPikgPT4gdm9pZFxuICBvbkJhY2tncm91bmRJbWFnZURlbGV0ZT86IChpbWFnZUlkOiBzdHJpbmcpID0+IHZvaWRcbiAgb25DYW52YXNSZWFkeT86IChjYW52YXNFbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZFxufVxuXG5pbnRlcmZhY2UgQ2FudmFzU3RhdGUge1xuICBzY2FsZTogbnVtYmVyXG4gIHg6IG51bWJlclxuICB5OiBudW1iZXJcbn1cblxuY29uc3QgQ2FudmFzRWRpdG9yOiBSZWFjdC5GQzxDYW52YXNFZGl0b3JQcm9wcz4gPSAoe1xuICB3aWR0aCA9IDEyMDAsXG4gIGhlaWdodCA9IDgwMCxcbiAgY2xhc3NOYW1lID0gJycsXG4gIG9uRXF1aXBtZW50QWRkLFxuICBwbGFjZWRFcXVpcG1lbnQgPSBbXSxcbiAgZXF1aXBtZW50RGVmaW5pdGlvbnMsXG4gIG9uRXF1aXBtZW50U2VsZWN0LFxuICBvbkVxdWlwbWVudE1vdmUsXG4gIG9uRXF1aXBtZW50Um90YXRlLFxuICBvbkVxdWlwbWVudERlbGV0ZSxcbiAgc2VsZWN0ZWRFcXVpcG1lbnRJZCxcbiAgYmFja2dyb3VuZEltYWdlcyA9IFtdLFxuICBvbkJhY2tncm91bmRJbWFnZUFkZCxcbiAgb25CYWNrZ3JvdW5kSW1hZ2VVcGRhdGUsXG4gIG9uQmFja2dyb3VuZEltYWdlRGVsZXRlLFxuICBvbkNhbnZhc1JlYWR5XG59KSA9PiB7XG4gIGNvbnN0IHN0YWdlUmVmID0gdXNlUmVmPEtvbnZhLlN0YWdlPihudWxsKVxuICBjb25zdCBbaXNDbGllbnQsIHNldElzQ2xpZW50XSA9IHVzZVN0YXRlKGZhbHNlKVxuICBcbiAgLy8gQ2FudmFzIGNvbmZpZ3VyYXRpb24gZm9yIDEsMDAwLDAwMCBzcSBmdCAoMTAwMGZ0IHggMTAwMGZ0KVxuICBjb25zdCBDQU5WQVNfQVJFQV9TUV9GVCA9IDEwMDAwMDBcbiAgY29uc3QgQ0FOVkFTX1NJREVfRlQgPSBNYXRoLnNxcnQoQ0FOVkFTX0FSRUFfU1FfRlQpIC8vIDEwMDAgZmVldFxuICBjb25zdCBQSVhFTFNfUEVSX0ZPT1QgPSAxMCAvLyBPcHRpbWl6ZWQgZm9yIHBlcmZvcm1hbmNlIHdpdGggdWx0cmEtbGFyZ2UgYXJlYXNcbiAgY29uc3QgQ0FOVkFTX1NJWkVfUElYRUxTID0gQ0FOVkFTX1NJREVfRlQgKiBQSVhFTFNfUEVSX0ZPT1QgLy8gMTAwMDAgcGl4ZWxzXG4gIFxuICBjb25zdCBbY2FudmFzU3RhdGUsIHNldENhbnZhc1N0YXRlXSA9IHVzZVN0YXRlPENhbnZhc1N0YXRlPih7XG4gICAgc2NhbGU6IDAuMiwgLy8gU3RhcnQgem9vbWVkIG91dCB0byBzZWUgbW9yZSBvZiB0aGUgbGFyZ2UgYXJlYVxuICAgIHg6IDAsXG4gICAgeTogMFxuICB9KVxuICBjb25zdCBbc3RhZ2VTaXplLCBzZXRTdGFnZVNpemVdID0gdXNlU3RhdGUoeyB3aWR0aCwgaGVpZ2h0IH0pXG4gIGNvbnN0IFtncmlkVmlzaWJsZSwgc2V0R3JpZFZpc2libGVdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW2JhY2tncm91bmRNYW5hZ2VyT3Blbiwgc2V0QmFja2dyb3VuZE1hbmFnZXJPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbc2VsZWN0ZWRCYWNrZ3JvdW5kSW1hZ2VJZCwgc2V0U2VsZWN0ZWRCYWNrZ3JvdW5kSW1hZ2VJZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKVxuICBjb25zdCBbc2NhbGVCYXJWaXNpYmxlLCBzZXRTY2FsZUJhclZpc2libGVdID0gdXNlU3RhdGUodHJ1ZSlcbiAgY29uc3QgW21lYXN1cmVtZW50VG9vbEFjdGl2ZSwgc2V0TWVhc3VyZW1lbnRUb29sQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbbWVhc3VyZW1lbnRzLCBzZXRNZWFzdXJlbWVudHNdID0gdXNlU3RhdGU8TWVhc3VyZW1lbnRbXT4oW10pXG4gIGNvbnN0IFthY3RpdmVNZWFzdXJlbWVudFRvb2wsIHNldEFjdGl2ZU1lYXN1cmVtZW50VG9vbF0gPSB1c2VTdGF0ZTwnYXJlYScgfCAncGVyaW1ldGVyJyB8ICdkaXN0YW5jZScgfCBudWxsPihudWxsKVxuICBjb25zdCBbc2ltcGxlTWVhc3VyZW1lbnRzLCBzZXRTaW1wbGVNZWFzdXJlbWVudHNdID0gdXNlU3RhdGU8U2ltcGxlTWVhc3VyZW1lbnRbXT4oW10pXG4gIGNvbnN0IFtzaG93RGlzdGFuY2VJbnB1dCwgc2V0U2hvd0Rpc3RhbmNlSW5wdXRdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtkaXN0YW5jZUlucHV0RGF0YSwgc2V0RGlzdGFuY2VJbnB1dERhdGFdID0gdXNlU3RhdGU8e1xuICAgIGNhbGN1bGF0ZWREaXN0YW5jZTogbnVtYmVyO1xuICAgIG9uU3VibWl0OiAoYWN0dWFsRGlzdGFuY2U6IG51bWJlcikgPT4gdm9pZDtcbiAgICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgfSB8IG51bGw+KG51bGwpXG4gIFxuICAvLyBFbmhhbmNlZCBtZWFzdXJlbWVudCB3b3JrZmxvdyBzdGF0ZXNcbiAgY29uc3QgW21lYXN1cmVtZW50RWRpdE1vZGUsIHNldE1lYXN1cmVtZW50RWRpdE1vZGVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtjdXJyZW50TWVhc3VyZW1lbnQsIHNldEN1cnJlbnRNZWFzdXJlbWVudF0gPSB1c2VTdGF0ZTx7XG4gICAgaWQ6IHN0cmluZztcbiAgICBmaXJzdFBvaW50OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0gfCBudWxsO1xuICAgIHNlY29uZFBvaW50OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0gfCBudWxsO1xuICAgIGlzQ29tcGxldGU6IGJvb2xlYW47XG4gICAgcmVhbFdvcmxkRGlzdGFuY2U/OiBudW1iZXI7XG4gIH0gfCBudWxsPihudWxsKVxuICBjb25zdCBbc2hvd0NhbGlicmF0ZURpYWxvZywgc2V0U2hvd0NhbGlicmF0ZURpYWxvZ10gPSB1c2VTdGF0ZShmYWxzZSlcblxuICAvLyBIYW5kbGUgY2FudmFzIHJlYWR5IGNhbGxiYWNrXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzQ2xpZW50ICYmIG9uQ2FudmFzUmVhZHkpIHtcbiAgICAgIC8vIFVzZSBhIHRpbWVvdXQgdG8gZW5zdXJlIHRoZSBzdGFnZSBpcyBmdWxseSBtb3VudGVkXG4gICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChzdGFnZVJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gc3RhZ2VSZWYuY3VycmVudC5jb250YWluZXIoKVxuICAgICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDYW52YXMgcmVhZHksIGNhbGxpbmcgb25DYW52YXNSZWFkeSB3aXRoIGNvbnRhaW5lcjonLCBjb250YWluZXIpXG4gICAgICAgICAgICBvbkNhbnZhc1JlYWR5KGNvbnRhaW5lcilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMCkgLy8gU21hbGwgZGVsYXkgdG8gZW5zdXJlIHN0YWdlIGlzIG1vdW50ZWRcbiAgICAgIFxuICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KVxuICAgIH1cbiAgfSwgW29uQ2FudmFzUmVhZHksIGlzQ2xpZW50XSlcblxuICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZSB0byBtYWtlIGNhbnZhcyByZXNwb25zaXZlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgaWYgKHN0YWdlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gc3RhZ2VSZWYuY3VycmVudC5jb250YWluZXIoKVxuICAgICAgICBjb25zdCBjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lci5vZmZzZXRXaWR0aFxuICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0XG4gICAgICAgIFxuICAgICAgICBzZXRTdGFnZVNpemUoe1xuICAgICAgICAgIHdpZHRoOiBjb250YWluZXJXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lckhlaWdodFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpXG4gICAgaGFuZGxlUmVzaXplKCkgLy8gSW5pdGlhbCBjYWxsXG5cbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSlcbiAgfSwgW10pXG5cbiAgLy8gSGFuZGxlIHpvb20gd2l0aCBtb3VzZSB3aGVlbFxuICBjb25zdCBoYW5kbGVXaGVlbCA9IHVzZUNhbGxiYWNrKChlOiBLb252YS5Lb252YUV2ZW50T2JqZWN0PFdoZWVsRXZlbnQ+KSA9PiB7XG4gICAgZS5ldnQucHJldmVudERlZmF1bHQoKVxuICAgIFxuICAgIGNvbnN0IHN0YWdlID0gZS50YXJnZXQuZ2V0U3RhZ2UoKVxuICAgIGlmICghc3RhZ2UpIHJldHVyblxuXG4gICAgY29uc3Qgb2xkU2NhbGUgPSBzdGFnZS5zY2FsZVgoKVxuICAgIGNvbnN0IHBvaW50ZXIgPSBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKVxuICAgIGlmICghcG9pbnRlcikgcmV0dXJuXG5cbiAgICAvLyBab29tIHNlbnNpdGl2aXR5XG4gICAgY29uc3Qgc2NhbGVCeSA9IDEuMVxuICAgIGNvbnN0IG5ld1NjYWxlID0gZS5ldnQuZGVsdGFZID4gMCA/IG9sZFNjYWxlIC8gc2NhbGVCeSA6IG9sZFNjYWxlICogc2NhbGVCeVxuXG4gICAgLy8gTGltaXQgem9vbSByYW5nZSAtIGFsbG93IHpvb21pbmcgb3V0IHRvIDQlIHRvIG1hdGNoIE1heCBPdXQgYnV0dG9uXG4gICAgY29uc3QgbWluU2NhbGUgPSAwLjA0IC8vIDQlIG1pbmltdW0gem9vbVxuICAgIGNvbnN0IG1heFNjYWxlID0gNVxuICAgIGNvbnN0IGNsYW1wZWRTY2FsZSA9IE1hdGgubWF4KG1pblNjYWxlLCBNYXRoLm1pbihtYXhTY2FsZSwgbmV3U2NhbGUpKVxuXG4gICAgLy8gQ2FsY3VsYXRlIG5ldyBwb3NpdGlvbiB0byB6b29tIHRvd2FyZHMgbW91c2UgcG9pbnRlclxuICAgIGNvbnN0IG1vdXNlUG9pbnRUbyA9IHtcbiAgICAgIHg6IChwb2ludGVyLnggLSBzdGFnZS54KCkpIC8gb2xkU2NhbGUsXG4gICAgICB5OiAocG9pbnRlci55IC0gc3RhZ2UueSgpKSAvIG9sZFNjYWxlLFxuICAgIH1cblxuICAgIGNvbnN0IG5ld1BvcyA9IHtcbiAgICAgIHg6IHBvaW50ZXIueCAtIG1vdXNlUG9pbnRUby54ICogY2xhbXBlZFNjYWxlLFxuICAgICAgeTogcG9pbnRlci55IC0gbW91c2VQb2ludFRvLnkgKiBjbGFtcGVkU2NhbGUsXG4gICAgfVxuXG4gICAgc3RhZ2Uuc2NhbGUoeyB4OiBjbGFtcGVkU2NhbGUsIHk6IGNsYW1wZWRTY2FsZSB9KVxuICAgIHN0YWdlLnBvc2l0aW9uKG5ld1BvcylcbiAgICBzdGFnZS5iYXRjaERyYXcoKVxuXG4gICAgc2V0Q2FudmFzU3RhdGUoe1xuICAgICAgc2NhbGU6IGNsYW1wZWRTY2FsZSxcbiAgICAgIHg6IG5ld1Bvcy54LFxuICAgICAgeTogbmV3UG9zLnlcbiAgICB9KVxuICB9LCBbXSlcblxuICAvLyBIYW5kbGUgcGFubmluZyB3aXRoIG1vdXNlIGRyYWdcbiAgY29uc3QgaGFuZGxlRHJhZ0VuZCA9IHVzZUNhbGxiYWNrKChlOiBLb252YS5Lb252YUV2ZW50T2JqZWN0PERyYWdFdmVudD4pID0+IHtcbiAgICBjb25zdCBzdGFnZSA9IGUudGFyZ2V0IGFzIEtvbnZhLlN0YWdlXG4gICAgc2V0Q2FudmFzU3RhdGUocHJldiA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIHg6IHN0YWdlLngoKSxcbiAgICAgIHk6IHN0YWdlLnkoKVxuICAgIH0pKVxuICB9LCBbXSlcblxuICAvLyBSZXNldCBjYW52YXMgdG8gY2VudGVyIGFuZCBkZWZhdWx0IHpvb20gZm9yIDI1MGsgc3EgZnQgY2FudmFzXG4gIGNvbnN0IHJlc2V0Q2FudmFzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRTY2FsZSA9IDAuMiAvLyAyMCUgem9vbSBmb3IgbGFyZ2UgY2FudmFzIG92ZXJ2aWV3XG4gICAgY29uc3QgY2VudGVyWCA9IChzdGFnZVNpemUud2lkdGggLyAyKSAtIChDQU5WQVNfU0laRV9QSVhFTFMgLyAyICogZGVmYXVsdFNjYWxlKVxuICAgIGNvbnN0IGNlbnRlclkgPSAoc3RhZ2VTaXplLmhlaWdodCAvIDIpIC0gKENBTlZBU19TSVpFX1BJWEVMUyAvIDIgKiBkZWZhdWx0U2NhbGUpXG4gICAgXG4gICAgaWYgKHN0YWdlUmVmLmN1cnJlbnQpIHtcbiAgICAgIHN0YWdlUmVmLmN1cnJlbnQuc2NhbGUoeyB4OiBkZWZhdWx0U2NhbGUsIHk6IGRlZmF1bHRTY2FsZSB9KVxuICAgICAgc3RhZ2VSZWYuY3VycmVudC5wb3NpdGlvbih7IHg6IGNlbnRlclgsIHk6IGNlbnRlclkgfSlcbiAgICAgIHN0YWdlUmVmLmN1cnJlbnQuYmF0Y2hEcmF3KClcbiAgICB9XG4gICAgXG4gICAgc2V0Q2FudmFzU3RhdGUoe1xuICAgICAgc2NhbGU6IGRlZmF1bHRTY2FsZSxcbiAgICAgIHg6IGNlbnRlclgsXG4gICAgICB5OiBjZW50ZXJZXG4gICAgfSlcbiAgfSwgW3N0YWdlU2l6ZSwgQ0FOVkFTX1NJWkVfUElYRUxTXSlcblxuICAvLyBGaXQgY2FudmFzIHRvIHNob3cgYWxsIGVxdWlwbWVudCB3aXRoIHByb3BlciBjZW50ZXJpbmcgYW5kIHpvb21cbiAgY29uc3QgZml0VG9Db250ZW50ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCc9PT0gRklUIFRPIENPTlRFTlQgQ0FMTEVEID09PScpXG4gICAgY29uc29sZS5sb2coJ3BsYWNlZEVxdWlwbWVudDonLCBwbGFjZWRFcXVpcG1lbnQpXG4gICAgXG4gICAgaWYgKCFwbGFjZWRFcXVpcG1lbnQgfHwgcGxhY2VkRXF1aXBtZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coJ05vIGVxdWlwbWVudCB0byBmaXQgdG8sIHJlc2V0dGluZyBjYW52YXMnKVxuICAgICAgcmVzZXRDYW52YXMoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGJvdW5kaW5nIGJveCBvZiBhbGwgZXF1aXBtZW50IGluY2x1ZGluZyB0aGVpciBjbGVhcmFuY2Ugem9uZXNcbiAgICBsZXQgbWluWCA9IEluZmluaXR5LCBtYXhYID0gLUluZmluaXR5XG4gICAgbGV0IG1pblkgPSBJbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eVxuXG4gICAgcGxhY2VkRXF1aXBtZW50LmZvckVhY2goZXF1aXBtZW50ID0+IHtcbiAgICAgIGNvbnN0IGVxdWlwbWVudERlZiA9IGVxdWlwbWVudERlZmluaXRpb25zPy5maW5kKGRlZiA9PiBkZWYuaWQgPT09IGVxdWlwbWVudC5lcXVpcG1lbnRJZClcbiAgICAgIGlmICghZXF1aXBtZW50RGVmKSByZXR1cm5cblxuICAgICAgY29uc3QgZGltZW5zaW9ucyA9IGVxdWlwbWVudC5kaW1lbnNpb25zXG4gICAgICBjb25zdCBpc0NpcmN1bGFyID0gZGltZW5zaW9ucy5zaGFwZSA9PT0gJ2NpcmNsZSdcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIGVxdWlwbWVudCBib3VuZHMgaW5jbHVkaW5nIGNsZWFyYW5jZVxuICAgICAgY29uc3QgY2xlYXJhbmNlID0gZXF1aXBtZW50RGVmLnJpZGVDbGVhcmluZyB8fCAwXG4gICAgICBjb25zdCBjbGVhcmFuY2VQaXhlbHMgPSBjbGVhcmFuY2UgKiBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgIFxuICAgICAgbGV0IGVxdWlwbWVudE1pblgsIGVxdWlwbWVudE1heFgsIGVxdWlwbWVudE1pblksIGVxdWlwbWVudE1heFlcbiAgICAgIFxuICAgICAgaWYgKGlzQ2lyY3VsYXIpIHtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gKGRpbWVuc2lvbnMgYXMgYW55KS5yYWRpdXMgKiBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgICAgZXF1aXBtZW50TWluWCA9IGVxdWlwbWVudC54IC0gcmFkaXVzIC0gY2xlYXJhbmNlUGl4ZWxzXG4gICAgICAgIGVxdWlwbWVudE1heFggPSBlcXVpcG1lbnQueCArIHJhZGl1cyArIGNsZWFyYW5jZVBpeGVsc1xuICAgICAgICBlcXVpcG1lbnRNaW5ZID0gZXF1aXBtZW50LnkgLSByYWRpdXMgLSBjbGVhcmFuY2VQaXhlbHNcbiAgICAgICAgZXF1aXBtZW50TWF4WSA9IGVxdWlwbWVudC55ICsgcmFkaXVzICsgY2xlYXJhbmNlUGl4ZWxzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB3aWR0aCA9IChkaW1lbnNpb25zIGFzIGFueSkud2lkdGggKiBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKGRpbWVuc2lvbnMgYXMgYW55KS5oZWlnaHQgKiBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgICAgZXF1aXBtZW50TWluWCA9IGVxdWlwbWVudC54IC0gd2lkdGgvMiAtIGNsZWFyYW5jZVBpeGVsc1xuICAgICAgICBlcXVpcG1lbnRNYXhYID0gZXF1aXBtZW50LnggKyB3aWR0aC8yICsgY2xlYXJhbmNlUGl4ZWxzXG4gICAgICAgIGVxdWlwbWVudE1pblkgPSBlcXVpcG1lbnQueSAtIGhlaWdodC8yIC0gY2xlYXJhbmNlUGl4ZWxzXG4gICAgICAgIGVxdWlwbWVudE1heFkgPSBlcXVpcG1lbnQueSArIGhlaWdodC8yICsgY2xlYXJhbmNlUGl4ZWxzXG4gICAgICB9XG4gICAgICBcbiAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBlcXVpcG1lbnRNaW5YKVxuICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIGVxdWlwbWVudE1heFgpXG4gICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgZXF1aXBtZW50TWluWSlcbiAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBlcXVpcG1lbnRNYXhZKVxuICAgIH0pXG5cbiAgICAvLyBBZGQgcGFkZGluZyBhcm91bmQgdGhlIGJvdW5kaW5nIGJveFxuICAgIGNvbnN0IHBhZGRpbmcgPSAxMDAgLy8gMTAwIHBpeGVscyBwYWRkaW5nXG4gICAgbWluWCAtPSBwYWRkaW5nXG4gICAgbWF4WCArPSBwYWRkaW5nXG4gICAgbWluWSAtPSBwYWRkaW5nXG4gICAgbWF4WSArPSBwYWRkaW5nXG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGNlbnRlciBvZiBhbGwgZXF1aXBtZW50XG4gICAgY29uc3QgY2VudGVyWCA9IChtaW5YICsgbWF4WCkgLyAyXG4gICAgY29uc3QgY2VudGVyWSA9IChtaW5ZICsgbWF4WSkgLyAyXG5cbiAgICAvLyBDYWxjdWxhdGUgcmVxdWlyZWQgc2NhbGUgdG8gZml0IGFsbCBlcXVpcG1lbnQgaW4gdmlld3BvcnRcbiAgICBjb25zdCBjb250ZW50V2lkdGggPSBtYXhYIC0gbWluWFxuICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSBtYXhZIC0gbWluWVxuICAgIGNvbnN0IHNjYWxlWCA9IHN0YWdlU2l6ZS53aWR0aCAvIGNvbnRlbnRXaWR0aFxuICAgIGNvbnN0IHNjYWxlWSA9IHN0YWdlU2l6ZS5oZWlnaHQgLyBjb250ZW50SGVpZ2h0XG4gICAgY29uc3Qgb3B0aW1hbFNjYWxlID0gTWF0aC5taW4oc2NhbGVYLCBzY2FsZVksIDIpIC8vIENhcCBhdCAyeCB6b29tXG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIHRvIGNlbnRlciB0aGUgY29udGVudFxuICAgIGNvbnN0IG5ld1ggPSAoc3RhZ2VTaXplLndpZHRoIC8gMikgLSAoY2VudGVyWCAqIG9wdGltYWxTY2FsZSlcbiAgICBjb25zdCBuZXdZID0gKHN0YWdlU2l6ZS5oZWlnaHQgLyAyKSAtIChjZW50ZXJZICogb3B0aW1hbFNjYWxlKVxuXG4gICAgLy8gQXBwbHkgdGhlIG5ldyB2aWV3IHNldHRpbmdzIHRvIGJvdGggc3RhZ2UgYW5kIHN0YXRlXG4gICAgY29uc29sZS5sb2coJ0FwcGx5aW5nIG5ldyBjYW52YXMgc3RhdGU6Jywge1xuICAgICAgc2NhbGU6IG9wdGltYWxTY2FsZSxcbiAgICAgIHg6IG5ld1gsXG4gICAgICB5OiBuZXdZLFxuICAgICAgY29udGVudEJvdW5kczogeyBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZIH0sXG4gICAgICBjZW50ZXI6IHsgY2VudGVyWCwgY2VudGVyWSB9XG4gICAgfSlcbiAgICBcbiAgICBpZiAoc3RhZ2VSZWYuY3VycmVudCkge1xuICAgICAgc3RhZ2VSZWYuY3VycmVudC5zY2FsZSh7IHg6IG9wdGltYWxTY2FsZSwgeTogb3B0aW1hbFNjYWxlIH0pXG4gICAgICBzdGFnZVJlZi5jdXJyZW50LnBvc2l0aW9uKHsgeDogbmV3WCwgeTogbmV3WSB9KVxuICAgICAgc3RhZ2VSZWYuY3VycmVudC5iYXRjaERyYXcoKVxuICAgIH1cbiAgICBcbiAgICBzZXRDYW52YXNTdGF0ZSh7XG4gICAgICBzY2FsZTogb3B0aW1hbFNjYWxlLFxuICAgICAgeDogbmV3WCxcbiAgICAgIHk6IG5ld1lcbiAgICB9KVxuICB9LCBbcGxhY2VkRXF1aXBtZW50LCBlcXVpcG1lbnREZWZpbml0aW9ucywgc3RhZ2VTaXplLCByZXNldENhbnZhc10pXG5cbiAgLy8gWm9vbSBpbiBmdW5jdGlvblxuICBjb25zdCB6b29tSW4gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFzdGFnZVJlZi5jdXJyZW50KSByZXR1cm5cbiAgICBcbiAgICBjb25zdCBzdGFnZSA9IHN0YWdlUmVmLmN1cnJlbnRcbiAgICBjb25zdCBvbGRTY2FsZSA9IHN0YWdlLnNjYWxlWCgpXG4gICAgY29uc3Qgc2NhbGVCeSA9IDEuMVxuICAgIGNvbnN0IG5ld1NjYWxlID0gTWF0aC5taW4oNSwgb2xkU2NhbGUgKiBzY2FsZUJ5KSAvLyBNYXggem9vbSA1eFxuICAgIFxuICAgIC8vIFpvb20gdG93YXJkcyBjZW50ZXIgb2YgdmlzaWJsZSBhcmVhXG4gICAgY29uc3QgY2VudGVyID0ge1xuICAgICAgeDogc3RhZ2VTaXplLndpZHRoIC8gMixcbiAgICAgIHk6IHN0YWdlU2l6ZS5oZWlnaHQgLyAyXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG1vdXNlUG9pbnRUbyA9IHtcbiAgICAgIHg6IChjZW50ZXIueCAtIHN0YWdlLngoKSkgLyBvbGRTY2FsZSxcbiAgICAgIHk6IChjZW50ZXIueSAtIHN0YWdlLnkoKSkgLyBvbGRTY2FsZSxcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbmV3UG9zID0ge1xuICAgICAgeDogY2VudGVyLnggLSBtb3VzZVBvaW50VG8ueCAqIG5ld1NjYWxlLFxuICAgICAgeTogY2VudGVyLnkgLSBtb3VzZVBvaW50VG8ueSAqIG5ld1NjYWxlLFxuICAgIH1cbiAgICBcbiAgICBzdGFnZS5zY2FsZSh7IHg6IG5ld1NjYWxlLCB5OiBuZXdTY2FsZSB9KVxuICAgIHN0YWdlLnBvc2l0aW9uKG5ld1BvcylcbiAgICBzdGFnZS5iYXRjaERyYXcoKVxuICAgIFxuICAgIHNldENhbnZhc1N0YXRlKHtcbiAgICAgIHNjYWxlOiBuZXdTY2FsZSxcbiAgICAgIHg6IG5ld1Bvcy54LFxuICAgICAgeTogbmV3UG9zLnlcbiAgICB9KVxuICB9LCBbc3RhZ2VTaXplXSlcblxuICAvLyBab29tIG91dCBmdW5jdGlvblxuICBjb25zdCB6b29tT3V0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghc3RhZ2VSZWYuY3VycmVudCkgcmV0dXJuXG4gICAgXG4gICAgY29uc3Qgc3RhZ2UgPSBzdGFnZVJlZi5jdXJyZW50XG4gICAgY29uc3Qgb2xkU2NhbGUgPSBzdGFnZS5zY2FsZVgoKVxuICAgIGNvbnN0IHNjYWxlQnkgPSAxLjFcbiAgICBjb25zdCBuZXdTY2FsZSA9IE1hdGgubWF4KDAuMDQsIG9sZFNjYWxlIC8gc2NhbGVCeSkgLy8gTWluIHpvb20gMC4wNHggKDQlKVxuICAgIFxuICAgIC8vIFpvb20gdG93YXJkcyBjZW50ZXIgb2YgdmlzaWJsZSBhcmVhXG4gICAgY29uc3QgY2VudGVyID0ge1xuICAgICAgeDogc3RhZ2VTaXplLndpZHRoIC8gMixcbiAgICAgIHk6IHN0YWdlU2l6ZS5oZWlnaHQgLyAyXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG1vdXNlUG9pbnRUbyA9IHtcbiAgICAgIHg6IChjZW50ZXIueCAtIHN0YWdlLngoKSkgLyBvbGRTY2FsZSxcbiAgICAgIHk6IChjZW50ZXIueSAtIHN0YWdlLnkoKSkgLyBvbGRTY2FsZSxcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbmV3UG9zID0ge1xuICAgICAgeDogY2VudGVyLnggLSBtb3VzZVBvaW50VG8ueCAqIG5ld1NjYWxlLFxuICAgICAgeTogY2VudGVyLnkgLSBtb3VzZVBvaW50VG8ueSAqIG5ld1NjYWxlLFxuICAgIH1cbiAgICBcbiAgICBzdGFnZS5zY2FsZSh7IHg6IG5ld1NjYWxlLCB5OiBuZXdTY2FsZSB9KVxuICAgIHN0YWdlLnBvc2l0aW9uKG5ld1BvcylcbiAgICBzdGFnZS5iYXRjaERyYXcoKVxuICAgIFxuICAgIHNldENhbnZhc1N0YXRlKHtcbiAgICAgIHNjYWxlOiBuZXdTY2FsZSxcbiAgICAgIHg6IG5ld1Bvcy54LFxuICAgICAgeTogbmV3UG9zLnlcbiAgICB9KVxuICB9LCBbc3RhZ2VTaXplXSlcblxuICAvLyBDYWxjdWxhdGUgdmlzaWJsZSBib3VuZHMgZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICBjb25zdCBnZXRWaXNpYmxlQm91bmRzID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IGJ1ZmZlciA9IDEwMDAgLy8gcGl4ZWxzIGJ1ZmZlciBmb3Igc21vb3RoIHNjcm9sbGluZ1xuICAgIHJldHVybiB7XG4gICAgICBtaW5YOiAoLWNhbnZhc1N0YXRlLnggLyBjYW52YXNTdGF0ZS5zY2FsZSkgLSBidWZmZXIsXG4gICAgICBtYXhYOiAoKC1jYW52YXNTdGF0ZS54ICsgc3RhZ2VTaXplLndpZHRoKSAvIGNhbnZhc1N0YXRlLnNjYWxlKSArIGJ1ZmZlcixcbiAgICAgIG1pblk6ICgtY2FudmFzU3RhdGUueSAvIGNhbnZhc1N0YXRlLnNjYWxlKSAtIGJ1ZmZlcixcbiAgICAgIG1heFk6ICgoLWNhbnZhc1N0YXRlLnkgKyBzdGFnZVNpemUuaGVpZ2h0KSAvIGNhbnZhc1N0YXRlLnNjYWxlKSArIGJ1ZmZlclxuICAgIH1cbiAgfSwgW2NhbnZhc1N0YXRlLngsIGNhbnZhc1N0YXRlLnksIGNhbnZhc1N0YXRlLnNjYWxlLCBzdGFnZVNpemVdKVxuXG4gIC8vIEhhbmRsZSBtZWFzdXJlbWVudCB0b29sIGNsaWNrc1xuICBjb25zdCBoYW5kbGVNZWFzdXJlbWVudFRvb2xDbGljayA9IHVzZUNhbGxiYWNrKCh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdoYW5kbGVNZWFzdXJlbWVudFRvb2xDbGljayBjYWxsZWQ6JywgeyB4LCB5LCBhY3RpdmVNZWFzdXJlbWVudFRvb2wgfSlcbiAgICBpZiAoIWFjdGl2ZU1lYXN1cmVtZW50VG9vbCkgcmV0dXJuXG4gICAgXG4gICAgLy8gRm9yd2FyZCBjbGljayB0byBTaW1wbGVNZWFzdXJlbWVudFRvb2wgdmlhIGdsb2JhbCBoYW5kbGVyc1xuICAgIGNvbnN0IGhhbmRsZXJzID0gKHdpbmRvdyBhcyBhbnkpLm1lYXN1cmVtZW50VG9vbEhhbmRsZXJzXG4gICAgY29uc29sZS5sb2coJ0dsb2JhbCBoYW5kbGVyczonLCBoYW5kbGVycylcbiAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMuaGFuZGxlQ2xpY2spIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDYWxsaW5nIGhhbmRsZXJzLmhhbmRsZUNsaWNrJylcbiAgICAgIGhhbmRsZXJzLmhhbmRsZUNsaWNrKHgsIHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdObyBnbG9iYWwgaGFuZGxlcnMgZm91bmQnKVxuICAgIH1cbiAgfSwgW2FjdGl2ZU1lYXN1cmVtZW50VG9vbF0pXG5cbiAgLy8gSGFuZGxlIGRvdWJsZS1jbGljayB0byBjb21wbGV0ZSBhcmVhL3BlcmltZXRlciBtZWFzdXJlbWVudHNcbiAgY29uc3QgaGFuZGxlTWVhc3VyZW1lbnRUb29sRG91YmxlQ2xpY2sgPSB1c2VDYWxsYmFjaygoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHtcbiAgICBpZiAoIWFjdGl2ZU1lYXN1cmVtZW50VG9vbCkgcmV0dXJuXG4gICAgXG4gICAgY29uc29sZS5sb2coJ0RvdWJsZS1jbGljayBmb3IgbWVhc3VyZW1lbnQgdG9vbDonLCB7IHgsIHksIGFjdGl2ZU1lYXN1cmVtZW50VG9vbCB9KVxuICAgIFxuICAgIC8vIEZpbmQgaW5jb21wbGV0ZSBtZWFzdXJlbWVudFxuICAgIGNvbnN0IGN1cnJlbnRNZWFzdXJlbWVudCA9IHNpbXBsZU1lYXN1cmVtZW50cy5maW5kKG0gPT4gIW0uY29tcGxldGVkKVxuICAgIGlmICghY3VycmVudE1lYXN1cmVtZW50IHx8IGN1cnJlbnRNZWFzdXJlbWVudC5wb2ludHMubGVuZ3RoIDwgMikgcmV0dXJuXG4gICAgXG4gICAgbGV0IHZhbHVlID0gMFxuICAgIGxldCBsYWJlbCA9ICcnXG4gICAgXG4gICAgaWYgKGFjdGl2ZU1lYXN1cmVtZW50VG9vbCA9PT0gJ2FyZWEnKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgYXJlYSB1c2luZyBzaG9lbGFjZSBmb3JtdWxhXG4gICAgICBpZiAoY3VycmVudE1lYXN1cmVtZW50LnBvaW50cy5sZW5ndGggPCAzKSByZXR1cm5cbiAgICAgIFxuICAgICAgbGV0IGFyZWEgPSAwXG4gICAgICBjb25zdCBwb2ludHMgPSBjdXJyZW50TWVhc3VyZW1lbnQucG9pbnRzXG4gICAgICBjb25zdCBuID0gcG9pbnRzLmxlbmd0aFxuICAgICAgXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBjb25zdCBqID0gKGkgKyAxKSAlIG5cbiAgICAgICAgYXJlYSArPSBwb2ludHNbaV0ueCAqIHBvaW50c1tqXS55XG4gICAgICAgIGFyZWEgLT0gcG9pbnRzW2pdLnggKiBwb2ludHNbaV0ueVxuICAgICAgfVxuICAgICAgXG4gICAgICBhcmVhID0gTWF0aC5hYnMoYXJlYSkgLyAyXG4gICAgICB2YWx1ZSA9IGFyZWEgLyAoUElYRUxTX1BFUl9GT09UICogUElYRUxTX1BFUl9GT09UKSAvLyBDb252ZXJ0IHRvIHNxdWFyZSBmZWV0XG4gICAgICBsYWJlbCA9IGBBcmVhOiAke3ZhbHVlLnRvRml4ZWQoMCl9IHNxIGZ0YFxuICAgICAgXG4gICAgfSBlbHNlIGlmIChhY3RpdmVNZWFzdXJlbWVudFRvb2wgPT09ICdwZXJpbWV0ZXInKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgcGVyaW1ldGVyXG4gICAgICBsZXQgcGVyaW1ldGVyID0gMFxuICAgICAgY29uc3QgcG9pbnRzID0gY3VycmVudE1lYXN1cmVtZW50LnBvaW50c1xuICAgICAgXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgY29uc3QgZHggPSBwb2ludHNbaSArIDFdLnggLSBwb2ludHNbaV0ueFxuICAgICAgICBjb25zdCBkeSA9IHBvaW50c1tpICsgMV0ueSAtIHBvaW50c1tpXS55XG4gICAgICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENsb3NlIHRoZSBwZXJpbWV0ZXIgKGNvbm5lY3QgbGFzdCBwb2ludCB0byBmaXJzdClcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMikge1xuICAgICAgICBjb25zdCBkeCA9IHBvaW50c1swXS54IC0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS54XG4gICAgICAgIGNvbnN0IGR5ID0gcG9pbnRzWzBdLnkgLSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdLnlcbiAgICAgICAgcGVyaW1ldGVyICs9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSlcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdmFsdWUgPSBwZXJpbWV0ZXIgLyBQSVhFTFNfUEVSX0ZPT1QgLy8gQ29udmVydCB0byBmZWV0XG4gICAgICBsYWJlbCA9IGBQZXJpbWV0ZXI6ICR7dmFsdWUudG9GaXhlZCgwKX0gZnRgXG4gICAgfVxuICAgIFxuICAgIC8vIENvbXBsZXRlIHRoZSBtZWFzdXJlbWVudFxuICAgIGNvbnN0IGNvbXBsZXRlZE1lYXN1cmVtZW50OiBTaW1wbGVNZWFzdXJlbWVudCA9IHtcbiAgICAgIC4uLmN1cnJlbnRNZWFzdXJlbWVudCxcbiAgICAgIHZhbHVlLFxuICAgICAgbGFiZWwsXG4gICAgICBjb21wbGV0ZWQ6IHRydWVcbiAgICB9XG4gICAgXG4gICAgc2V0U2ltcGxlTWVhc3VyZW1lbnRzKHByZXYgPT4gXG4gICAgICBwcmV2Lm1hcChtID0+IG0uaWQgPT09IGN1cnJlbnRNZWFzdXJlbWVudC5pZCA/IGNvbXBsZXRlZE1lYXN1cmVtZW50IDogbSlcbiAgICApXG4gICAgXG4gICAgY29uc29sZS5sb2coJ01lYXN1cmVtZW50IGNvbXBsZXRlZDonLCBjb21wbGV0ZWRNZWFzdXJlbWVudClcbiAgfSwgW2FjdGl2ZU1lYXN1cmVtZW50VG9vbCwgc2ltcGxlTWVhc3VyZW1lbnRzLCBQSVhFTFNfUEVSX0ZPT1RdKVxuXG4gIC8vIEVuaGFuY2VkIG1lYXN1cmVtZW50IGhhbmRsZXJzXG4gIGNvbnN0IGhhbmRsZUVuaGFuY2VkTWVhc3VyZW1lbnRQb2ludFNldCA9IHVzZUNhbGxiYWNrKChwb2ludDogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9KSA9PiB7XG4gICAgaWYgKCFjdXJyZW50TWVhc3VyZW1lbnQpIHJldHVyblxuXG4gICAgaWYgKCFjdXJyZW50TWVhc3VyZW1lbnQuZmlyc3RQb2ludCkge1xuICAgICAgLy8gU2V0IGZpcnN0IHBvaW50XG4gICAgICBzZXRDdXJyZW50TWVhc3VyZW1lbnQocHJldiA9PiBwcmV2ID8ge1xuICAgICAgICAuLi5wcmV2LFxuICAgICAgICBmaXJzdFBvaW50OiBwb2ludFxuICAgICAgfSA6IG51bGwpXG4gICAgfSBlbHNlIGlmICghY3VycmVudE1lYXN1cmVtZW50LnNlY29uZFBvaW50KSB7XG4gICAgICAvLyBTZXQgc2Vjb25kIHBvaW50IGFuZCBjb21wbGV0ZSBtZWFzdXJlbWVudFxuICAgICAgY29uc3QgdXBkYXRlZE1lYXN1cmVtZW50ID0ge1xuICAgICAgICAuLi5jdXJyZW50TWVhc3VyZW1lbnQsXG4gICAgICAgIHNlY29uZFBvaW50OiBwb2ludCxcbiAgICAgICAgaXNDb21wbGV0ZTogdHJ1ZVxuICAgICAgfVxuICAgICAgc2V0Q3VycmVudE1lYXN1cmVtZW50KHVwZGF0ZWRNZWFzdXJlbWVudClcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIGRpc3RhbmNlIGFuZCBzaG93IGNhbGlicmF0aW9uIGRpYWxvZ1xuICAgICAgY29uc3QgZHggPSBwb2ludC54IC0gY3VycmVudE1lYXN1cmVtZW50LmZpcnN0UG9pbnQueFxuICAgICAgY29uc3QgZHkgPSBwb2ludC55IC0gY3VycmVudE1lYXN1cmVtZW50LmZpcnN0UG9pbnQueVxuICAgICAgY29uc3QgcGl4ZWxEaXN0YW5jZSA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSlcbiAgICAgIGNvbnN0IGNhbGN1bGF0ZWREaXN0YW5jZSA9IHBpeGVsRGlzdGFuY2UgLyBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgIFxuICAgICAgLy8gU2hvdyBjYWxpYnJhdGlvbiBkaWFsb2cgYWZ0ZXIgYSBzaG9ydCBkZWxheVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldFNob3dDYWxpYnJhdGVEaWFsb2codHJ1ZSlcbiAgICAgIH0sIDUwMClcbiAgICB9XG4gIH0sIFtjdXJyZW50TWVhc3VyZW1lbnQsIFBJWEVMU19QRVJfRk9PVF0pXG5cbiAgY29uc3QgaGFuZGxlRW5oYW5jZWRNZWFzdXJlbWVudEVkaXQgPSB1c2VDYWxsYmFjaygoZmlyc3RQb2ludDogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9LCBzZWNvbmRQb2ludDogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9KSA9PiB7XG4gICAgaWYgKCFjdXJyZW50TWVhc3VyZW1lbnQpIHJldHVyblxuXG4gICAgc2V0Q3VycmVudE1lYXN1cmVtZW50KHByZXYgPT4gcHJldiA/IHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBmaXJzdFBvaW50LFxuICAgICAgc2Vjb25kUG9pbnRcbiAgICB9IDogbnVsbClcbiAgfSwgW2N1cnJlbnRNZWFzdXJlbWVudF0pXG5cbiAgY29uc3QgaGFuZGxlQ2FsaWJyYXRlU3VibWl0ID0gdXNlQ2FsbGJhY2soKGFjdHVhbERpc3RhbmNlOiBudW1iZXIpID0+IHtcbiAgICBpZiAoIWN1cnJlbnRNZWFzdXJlbWVudCB8fCAhY3VycmVudE1lYXN1cmVtZW50LmZpcnN0UG9pbnQgfHwgIWN1cnJlbnRNZWFzdXJlbWVudC5zZWNvbmRQb2ludCkgcmV0dXJuXG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvclxuICAgIGNvbnN0IGR4ID0gY3VycmVudE1lYXN1cmVtZW50LnNlY29uZFBvaW50LnggLSBjdXJyZW50TWVhc3VyZW1lbnQuZmlyc3RQb2ludC54XG4gICAgY29uc3QgZHkgPSBjdXJyZW50TWVhc3VyZW1lbnQuc2Vjb25kUG9pbnQueSAtIGN1cnJlbnRNZWFzdXJlbWVudC5maXJzdFBvaW50LnlcbiAgICBjb25zdCBwaXhlbERpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KVxuICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gYWN0dWFsRGlzdGFuY2UgLyAocGl4ZWxEaXN0YW5jZSAvIFBJWEVMU19QRVJfRk9PVClcblxuICAgIC8vIFVwZGF0ZSB0aGUgbWVhc3VyZW1lbnQgd2l0aCByZWFsLXdvcmxkIGRpc3RhbmNlXG4gICAgc2V0Q3VycmVudE1lYXN1cmVtZW50KHByZXYgPT4gcHJldiA/IHtcbiAgICAgIC4uLnByZXYsXG4gICAgICByZWFsV29ybGREaXN0YW5jZTogYWN0dWFsRGlzdGFuY2VcbiAgICB9IDogbnVsbClcblxuICAgIC8vIEFwcGx5IHNjYWxlIGNhbGlicmF0aW9uIHRvIGJhY2tncm91bmQgaW1hZ2VzIGlmIGFueVxuICAgIGlmIChiYWNrZ3JvdW5kSW1hZ2VzICYmIGJhY2tncm91bmRJbWFnZXMubGVuZ3RoID4gMCAmJiBvbkJhY2tncm91bmRJbWFnZVVwZGF0ZSkge1xuICAgICAgYmFja2dyb3VuZEltYWdlcy5mb3JFYWNoKGltYWdlID0+IHtcbiAgICAgICAgb25CYWNrZ3JvdW5kSW1hZ2VVcGRhdGUoaW1hZ2UuaWQsIHtcbiAgICAgICAgICBzY2FsZVg6IChpbWFnZS5zY2FsZVggfHwgMSkgKiBzY2FsZUZhY3RvcixcbiAgICAgICAgICBzY2FsZVk6IChpbWFnZS5zY2FsZVkgfHwgMSkgKiBzY2FsZUZhY3RvclxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBzZXRTaG93Q2FsaWJyYXRlRGlhbG9nKGZhbHNlKVxuICAgIGNvbnNvbGUubG9nKCdTY2FsZSBjYWxpYnJhdGVkIHdpdGggZmFjdG9yOicsIHNjYWxlRmFjdG9yKVxuICB9LCBbY3VycmVudE1lYXN1cmVtZW50LCBQSVhFTFNfUEVSX0ZPT1QsIGJhY2tncm91bmRJbWFnZXMsIG9uQmFja2dyb3VuZEltYWdlVXBkYXRlXSlcblxuICBjb25zdCBoYW5kbGVDYWxpYnJhdGVFZGl0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFNob3dDYWxpYnJhdGVEaWFsb2coZmFsc2UpXG4gICAgc2V0TWVhc3VyZW1lbnRFZGl0TW9kZSh0cnVlKVxuICB9LCBbXSlcblxuICBjb25zdCBoYW5kbGVDYWxpYnJhdGVDYW5jZWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0U2hvd0NhbGlicmF0ZURpYWxvZyhmYWxzZSlcbiAgICAvLyBPcHRpb25hbGx5IHJlc2V0IHRoZSBtZWFzdXJlbWVudFxuICAgIHNldEN1cnJlbnRNZWFzdXJlbWVudChudWxsKVxuICAgIHNldE1lYXN1cmVtZW50VG9vbEFjdGl2ZShmYWxzZSlcbiAgfSwgW10pXG5cbiAgLy8gSGFuZGxlIGNhbnZhcyBjbGlja3MgZm9yIG1lYXN1cmVtZW50IHRvb2xzXG4gIGNvbnN0IGhhbmRsZUNhbnZhc0NsaWNrID0gdXNlQ2FsbGJhY2soKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XG4gICAgaWYgKCFhY3RpdmVNZWFzdXJlbWVudFRvb2wpIHJldHVyblxuICAgIFxuICAgIGNvbnNvbGUubG9nKCdDYW52YXMgY2xpY2sgZm9yIG1lYXN1cmVtZW50IHRvb2wgKHJhdyk6JywgeyB4LCB5LCBhY3RpdmVNZWFzdXJlbWVudFRvb2wgfSlcbiAgICBcbiAgICAvLyBUcmFuc2Zvcm0gc2NyZWVuIGNvb3JkaW5hdGVzIHRvIGNhbnZhcyBjb29yZGluYXRlc1xuICAgIC8vIEFjY291bnQgZm9yIGNhbnZhcyB6b29tIGFuZCBwYW5cbiAgICBjb25zdCBjYW52YXNYID0gKHggLSBjYW52YXNTdGF0ZS54KSAvIGNhbnZhc1N0YXRlLnNjYWxlXG4gICAgY29uc3QgY2FudmFzWSA9ICh5IC0gY2FudmFzU3RhdGUueSkgLyBjYW52YXNTdGF0ZS5zY2FsZVxuICAgIFxuICAgIGNvbnNvbGUubG9nKCdDYW52YXMgY2xpY2sgZm9yIG1lYXN1cmVtZW50IHRvb2wgKHRyYW5zZm9ybWVkKTonLCB7IGNhbnZhc1gsIGNhbnZhc1ksIGNhbnZhc1N0YXRlIH0pXG4gICAgXG4gICAgY29uc3QgbmV3UG9pbnQgPSB7IHg6IGNhbnZhc1gsIHk6IGNhbnZhc1kgfVxuICAgIFxuICAgIGlmIChzaW1wbGVNZWFzdXJlbWVudHMuc29tZShtID0+ICFtLmNvbXBsZXRlZCkpIHtcbiAgICAgIC8vIENvbnRpbnVlIGV4aXN0aW5nIG1lYXN1cmVtZW50XG4gICAgICBjb25zdCBjdXJyZW50TWVhc3VyZW1lbnQgPSBzaW1wbGVNZWFzdXJlbWVudHMuZmluZChtID0+ICFtLmNvbXBsZXRlZClcbiAgICAgIGlmIChjdXJyZW50TWVhc3VyZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZFBvaW50cyA9IFsuLi5jdXJyZW50TWVhc3VyZW1lbnQucG9pbnRzLCBuZXdQb2ludF1cbiAgICAgICAgXG4gICAgICAgIC8vIEZvciBkaXN0YW5jZSB0b29sLCBjb21wbGV0ZSBhZnRlciAyIHBvaW50c1xuICAgICAgICBpZiAoYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAnZGlzdGFuY2UnICYmIHVwZGF0ZWRQb2ludHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyh1cGRhdGVkUG9pbnRzWzFdLnggLSB1cGRhdGVkUG9pbnRzWzBdLngsIDIpICsgXG4gICAgICAgICAgICBNYXRoLnBvdyh1cGRhdGVkUG9pbnRzWzFdLnkgLSB1cGRhdGVkUG9pbnRzWzBdLnksIDIpXG4gICAgICAgICAgKSAvIFBJWEVMU19QRVJfRk9PVFxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGNvbXBsZXRlZE1lYXN1cmVtZW50OiBTaW1wbGVNZWFzdXJlbWVudCA9IHtcbiAgICAgICAgICAgIC4uLmN1cnJlbnRNZWFzdXJlbWVudCxcbiAgICAgICAgICAgIHBvaW50czogdXBkYXRlZFBvaW50cyxcbiAgICAgICAgICAgIHZhbHVlOiBkaXN0YW5jZSxcbiAgICAgICAgICAgIGxhYmVsOiBgRGlzdGFuY2U6ICR7ZGlzdGFuY2UudG9GaXhlZCgwKX0gZnRgLFxuICAgICAgICAgICAgY29tcGxldGVkOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIHNldFNpbXBsZU1lYXN1cmVtZW50cyhwcmV2ID0+IFxuICAgICAgICAgICAgcHJldi5tYXAobSA9PiBtLmlkID09PSBjdXJyZW50TWVhc3VyZW1lbnQuaWQgPyBjb21wbGV0ZWRNZWFzdXJlbWVudCA6IG0pXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IG1lYXN1cmVtZW50IHdpdGggbmV3IHBvaW50XG4gICAgICAgICAgc2V0U2ltcGxlTWVhc3VyZW1lbnRzKHByZXYgPT4gXG4gICAgICAgICAgICBwcmV2Lm1hcChtID0+IG0uaWQgPT09IGN1cnJlbnRNZWFzdXJlbWVudC5pZCA/IHsgLi4ubSwgcG9pbnRzOiB1cGRhdGVkUG9pbnRzIH0gOiBtKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGFydCBuZXcgbWVhc3VyZW1lbnRcbiAgICAgIGNvbnN0IG5ld01lYXN1cmVtZW50OiBTaW1wbGVNZWFzdXJlbWVudCA9IHtcbiAgICAgICAgaWQ6IGAke2FjdGl2ZU1lYXN1cmVtZW50VG9vbH0tJHtEYXRlLm5vdygpfWAsXG4gICAgICAgIHR5cGU6IGFjdGl2ZU1lYXN1cmVtZW50VG9vbCxcbiAgICAgICAgcG9pbnRzOiBbbmV3UG9pbnRdLFxuICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgbGFiZWw6ICcnLFxuICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICB9XG4gICAgICBcbiAgICAgIHNldFNpbXBsZU1lYXN1cmVtZW50cyhwcmV2ID0+IFsuLi5wcmV2LCBuZXdNZWFzdXJlbWVudF0pXG4gICAgfVxuICB9LCBbYWN0aXZlTWVhc3VyZW1lbnRUb29sLCBzaW1wbGVNZWFzdXJlbWVudHMsIFBJWEVMU19QRVJfRk9PVF0pXG4gIFxuICAvLyBIYW5kbGUgc3RhZ2UgY2xpY2sgdG8gZGVzZWxlY3QgZXF1aXBtZW50IHdoZW4gY2xpY2tpbmcgb24gZW1wdHkgY2FudmFzXG4gIGNvbnN0IGhhbmRsZVN0YWdlQ2xpY2sgPSB1c2VDYWxsYmFjaygoZTogYW55KSA9PiB7XG4gICAgLy8gQ2hlY2sgaWYgd2UgY2xpY2tlZCBvbiB0aGUgc3RhZ2UgaXRzZWxmIChub3Qgb24gYW55IGVxdWlwbWVudClcbiAgICBjb25zdCBjbGlja2VkT25FbXB0eSA9IGUudGFyZ2V0ID09PSBlLnRhcmdldC5nZXRTdGFnZSgpXG4gICAgXG4gICAgaWYgKGNsaWNrZWRPbkVtcHR5KSB7XG4gICAgICBjb25zdCBzdGFnZSA9IGUudGFyZ2V0LmdldFN0YWdlKClcbiAgICAgIGNvbnN0IHBvcyA9IHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpXG4gICAgICBcbiAgICAgIC8vIElmIGVuaGFuY2VkIG1lYXN1cmVtZW50IHRvb2wgaXMgYWN0aXZlLCBoYW5kbGUgdGhlIGNsaWNrXG4gICAgICBpZiAobWVhc3VyZW1lbnRUb29sQWN0aXZlICYmICFhY3RpdmVNZWFzdXJlbWVudFRvb2wgJiYgcG9zKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhc1ggPSAocG9zLnggLSBjYW52YXNTdGF0ZS54KSAvIGNhbnZhc1N0YXRlLnNjYWxlXG4gICAgICAgIGNvbnN0IGNhbnZhc1kgPSAocG9zLnkgLSBjYW52YXNTdGF0ZS55KSAvIGNhbnZhc1N0YXRlLnNjYWxlXG4gICAgICAgIFxuICAgICAgICAvLyBGb3J3YXJkIHRvIGVuaGFuY2VkIG1lYXN1cmVtZW50IGhhbmRsZXJzXG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gKHdpbmRvdyBhcyBhbnkpLmVuaGFuY2VkTWVhc3VyZW1lbnRIYW5kbGVyc1xuICAgICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMuaGFuZGxlQ2xpY2spIHtcbiAgICAgICAgICBoYW5kbGVycy5oYW5kbGVDbGljayh7IHRhcmdldDogeyBnZXRTdGFnZTogKCkgPT4gc3RhZ2UgfSB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiBhIHNpbXBsZSBtZWFzdXJlbWVudCB0b29sIGlzIGFjdGl2ZSwgaGFuZGxlIHRoZSBjbGljayBmb3IgbWVhc3VyZW1lbnRcbiAgICAgIGlmIChhY3RpdmVNZWFzdXJlbWVudFRvb2wgJiYgcG9zKSB7XG4gICAgICAgIGhhbmRsZUNhbnZhc0NsaWNrKHBvcy54LCBwb3MueSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIE90aGVyd2lzZSwgZGVzZWxlY3QgZXF1aXBtZW50XG4gICAgICBvbkVxdWlwbWVudFNlbGVjdD8uKG51bGwpXG4gICAgICBzZXRTZWxlY3RlZEJhY2tncm91bmRJbWFnZUlkKG51bGwpXG4gICAgfVxuICB9LCBbb25FcXVpcG1lbnRTZWxlY3QsIGFjdGl2ZU1lYXN1cmVtZW50VG9vbCwgbWVhc3VyZW1lbnRUb29sQWN0aXZlLCBoYW5kbGVDYW52YXNDbGljaywgY2FudmFzU3RhdGVdKVxuICBcbiAgLy8gSGFuZGxlIHN0YWdlIGRvdWJsZSBjbGljayBmb3IgbWVhc3VyZW1lbnQgdG9vbHNcbiAgY29uc3QgaGFuZGxlU3RhZ2VEb3VibGVDbGljayA9IHVzZUNhbGxiYWNrKChlOiBhbnkpID0+IHtcbiAgICBpZiAoIWFjdGl2ZU1lYXN1cmVtZW50VG9vbCkgcmV0dXJuXG4gICAgXG4gICAgY29uc3Qgc3RhZ2UgPSBlLnRhcmdldC5nZXRTdGFnZSgpXG4gICAgY29uc3QgcG9zID0gc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKClcbiAgICBcbiAgICBpZiAocG9zKSB7XG4gICAgICAvLyBUcmFuc2Zvcm0gc2NyZWVuIGNvb3JkaW5hdGVzIHRvIGNhbnZhcyBjb29yZGluYXRlc1xuICAgICAgY29uc3QgY2FudmFzWCA9IChwb3MueCAtIGNhbnZhc1N0YXRlLngpIC8gY2FudmFzU3RhdGUuc2NhbGVcbiAgICAgIGNvbnN0IGNhbnZhc1kgPSAocG9zLnkgLSBjYW52YXNTdGF0ZS55KSAvIGNhbnZhc1N0YXRlLnNjYWxlXG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdEb3VibGUtY2xpY2sgZm9yIG1lYXN1cmVtZW50IHRvb2w6JywgeyB4OiBjYW52YXNYLCB5OiBjYW52YXNZLCBhY3RpdmVNZWFzdXJlbWVudFRvb2wgfSlcbiAgICAgIFxuICAgICAgLy8gQ29tcGxldGUgdGhlIGN1cnJlbnQgbWVhc3VyZW1lbnRcbiAgICAgIHNldFNpbXBsZU1lYXN1cmVtZW50cyhwcmV2ID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudE1lYXN1cmVtZW50ID0gcHJldi5maW5kKG0gPT4gIW0uY29tcGxldGVkKVxuICAgICAgICBpZiAoIWN1cnJlbnRNZWFzdXJlbWVudCkgcmV0dXJuIHByZXZcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCB0aGUgZmluYWwgcG9pbnQgZm9yIGFyZWEgYW5kIHBlcmltZXRlciBtZWFzdXJlbWVudHNcbiAgICAgICAgaWYgKGFjdGl2ZU1lYXN1cmVtZW50VG9vbCA9PT0gJ2FyZWEnIHx8IGFjdGl2ZU1lYXN1cmVtZW50VG9vbCA9PT0gJ3BlcmltZXRlcicpIHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUG9pbnRzID0gWy4uLmN1cnJlbnRNZWFzdXJlbWVudC5wb2ludHMsIHsgeDogY2FudmFzWCwgeTogY2FudmFzWSB9XVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgbWVhc3VyZW1lbnQgdmFsdWVcbiAgICAgICAgICBsZXQgdmFsdWUgPSAwXG4gICAgICAgICAgbGV0IGxhYmVsID0gJydcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAnYXJlYScgJiYgdXBkYXRlZFBvaW50cy5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGFyZWEgdXNpbmcgc2hvZWxhY2UgZm9ybXVsYVxuICAgICAgICAgICAgbGV0IGFyZWEgPSAwXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwZGF0ZWRQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgY29uc3QgaiA9IChpICsgMSkgJSB1cGRhdGVkUG9pbnRzLmxlbmd0aFxuICAgICAgICAgICAgICBhcmVhICs9IHVwZGF0ZWRQb2ludHNbaV0ueCAqIHVwZGF0ZWRQb2ludHNbal0ueVxuICAgICAgICAgICAgICBhcmVhIC09IHVwZGF0ZWRQb2ludHNbal0ueCAqIHVwZGF0ZWRQb2ludHNbaV0ueVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJlYSA9IE1hdGguYWJzKGFyZWEpIC8gMlxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb252ZXJ0IGZyb20gcGl4ZWxzIHRvIHNxdWFyZSBmZWV0XG4gICAgICAgICAgICBjb25zdCBhcmVhSW5TcUZ0ID0gYXJlYSAvIChQSVhFTFNfUEVSX0ZPT1QgKiBQSVhFTFNfUEVSX0ZPT1QpXG4gICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQoYXJlYUluU3FGdClcbiAgICAgICAgICAgIGxhYmVsID0gYEFyZWE6ICR7dmFsdWUudG9Mb2NhbGVTdHJpbmcoKX0gc3EgZnRgXG4gICAgICAgICAgfSBlbHNlIGlmIChhY3RpdmVNZWFzdXJlbWVudFRvb2wgPT09ICdwZXJpbWV0ZXInICYmIHVwZGF0ZWRQb2ludHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBwZXJpbWV0ZXIgKHN1bSBvZiBhbGwgc2VnbWVudHMgKyBjbG9zaW5nIHNlZ21lbnQpXG4gICAgICAgICAgICBsZXQgcGVyaW1ldGVyID0gMFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cGRhdGVkUG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBkeCA9IHVwZGF0ZWRQb2ludHNbaSArIDFdLnggLSB1cGRhdGVkUG9pbnRzW2ldLnhcbiAgICAgICAgICAgICAgY29uc3QgZHkgPSB1cGRhdGVkUG9pbnRzW2kgKyAxXS55IC0gdXBkYXRlZFBvaW50c1tpXS55XG4gICAgICAgICAgICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBZGQgY2xvc2luZyBzZWdtZW50XG4gICAgICAgICAgICBjb25zdCBkeCA9IHVwZGF0ZWRQb2ludHNbMF0ueCAtIHVwZGF0ZWRQb2ludHNbdXBkYXRlZFBvaW50cy5sZW5ndGggLSAxXS54XG4gICAgICAgICAgICBjb25zdCBkeSA9IHVwZGF0ZWRQb2ludHNbMF0ueSAtIHVwZGF0ZWRQb2ludHNbdXBkYXRlZFBvaW50cy5sZW5ndGggLSAxXS55XG4gICAgICAgICAgICBwZXJpbWV0ZXIgKz0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDb252ZXJ0IGZyb20gcGl4ZWxzIHRvIGZlZXRcbiAgICAgICAgICAgIGNvbnN0IHBlcmltZXRlckluRnQgPSBwZXJpbWV0ZXIgLyBQSVhFTFNfUEVSX0ZPT1RcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChwZXJpbWV0ZXJJbkZ0KVxuICAgICAgICAgICAgbGFiZWwgPSBgUGVyaW1ldGVyOiAke3ZhbHVlLnRvTG9jYWxlU3RyaW5nKCl9IGZ0YFxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zb2xlLmxvZygnTWVhc3VyZW1lbnQgY29tcGxldGVkOicsIHsgaWQ6IGN1cnJlbnRNZWFzdXJlbWVudC5pZCwgdmFsdWUsIGxhYmVsLCBjb21wbGV0ZWQ6IHRydWUgfSlcbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gcHJldi5tYXAobSA9PiBcbiAgICAgICAgICAgIG0uaWQgPT09IGN1cnJlbnRNZWFzdXJlbWVudC5pZCBcbiAgICAgICAgICAgICAgPyB7IC4uLm0sIHBvaW50czogdXBkYXRlZFBvaW50cywgdmFsdWUsIGxhYmVsLCBjb21wbGV0ZWQ6IHRydWUgfVxuICAgICAgICAgICAgICA6IG1cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBwcmV2XG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBEZWFjdGl2YXRlIHRoZSBtZWFzdXJlbWVudCB0b29sXG4gICAgICBzZXRBY3RpdmVNZWFzdXJlbWVudFRvb2wobnVsbClcbiAgICB9XG4gIH0sIFthY3RpdmVNZWFzdXJlbWVudFRvb2wsIGNhbnZhc1N0YXRlLCBQSVhFTFNfUEVSX0ZPT1RdKVxuXG4gIC8vIEJhY2tncm91bmQgaW1hZ2UgbWFuYWdlbWVudCBmdW5jdGlvbnNcbiAgY29uc3QgaGFuZGxlQmFja2dyb3VuZEltYWdlQWRkID0gdXNlQ2FsbGJhY2soKGltYWdlOiBPbWl0PEJhY2tncm91bmRJbWFnZSwgJ2lkJz4pID0+IHtcbiAgICBjb25zdCBpbWFnZVdpdGhJZCA9IHtcbiAgICAgIC4uLmltYWdlLFxuICAgICAgaWQ6IGBiZy0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWBcbiAgICB9XG4gICAgb25CYWNrZ3JvdW5kSW1hZ2VBZGQ/LihpbWFnZVdpdGhJZClcbiAgfSwgW29uQmFja2dyb3VuZEltYWdlQWRkXSlcblxuICBjb25zdCBoYW5kbGVCYWNrZ3JvdW5kSW1hZ2VTZWxlY3QgPSAoaW1hZ2VJZDogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgIHNldFNlbGVjdGVkQmFja2dyb3VuZEltYWdlSWQoaW1hZ2VJZClcbiAgfVxuXG4gIGNvbnN0IGNhbGlicmF0ZUltYWdlU2NhbGUgPSAoYWN0dWFsRGlzdGFuY2U6IG51bWJlciwgY2FsY3VsYXRlZERpc3RhbmNlOiBudW1iZXIpID0+IHtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIHNjYWxlIGNvcnJlY3Rpb24gZmFjdG9yXG4gICAgY29uc3Qgc2NhbGVDb3JyZWN0aW9uID0gYWN0dWFsRGlzdGFuY2UgLyBjYWxjdWxhdGVkRGlzdGFuY2VcbiAgICBcbiAgICAvLyBBcHBseSB0aGUgY29ycmVjdGlvbiB0byBhbGwgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBiYWNrZ3JvdW5kSW1hZ2VzLmZvckVhY2goaW1hZ2UgPT4ge1xuICAgICAgaWYgKG9uQmFja2dyb3VuZEltYWdlVXBkYXRlKSB7XG4gICAgICAgIG9uQmFja2dyb3VuZEltYWdlVXBkYXRlKGltYWdlLmlkLCB7XG4gICAgICAgICAgc2NhbGVYOiBpbWFnZS5zY2FsZVggKiBzY2FsZUNvcnJlY3Rpb24sXG4gICAgICAgICAgc2NhbGVZOiBpbWFnZS5zY2FsZVkgKiBzY2FsZUNvcnJlY3Rpb25cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBTY2FsZSBjYWxpYnJhdGVkOiAke3NjYWxlQ29ycmVjdGlvbi50b0ZpeGVkKDMpfXggY29ycmVjdGlvbiBhcHBsaWVkIHRvICR7YmFja2dyb3VuZEltYWdlcy5sZW5ndGh9IGJhY2tncm91bmQgaW1hZ2VzYClcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZVNob3dEaXN0YW5jZUlucHV0ID0gKFxuICAgIGNhbGN1bGF0ZWREaXN0YW5jZTogbnVtYmVyLFxuICAgIG9uU3VibWl0OiAoYWN0dWFsRGlzdGFuY2U6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkNhbmNlbDogKCkgPT4gdm9pZFxuICApID0+IHtcbiAgICBzZXREaXN0YW5jZUlucHV0RGF0YSh7XG4gICAgICBjYWxjdWxhdGVkRGlzdGFuY2UsXG4gICAgICBvblN1Ym1pdDogKGFjdHVhbERpc3RhbmNlOiBudW1iZXIpID0+IHtcbiAgICAgICAgLy8gQ2FsaWJyYXRlIHRoZSBpbWFnZSBzY2FsZSBhdXRvbWF0aWNhbGx5XG4gICAgICAgIGNhbGlicmF0ZUltYWdlU2NhbGUoYWN0dWFsRGlzdGFuY2UsIGNhbGN1bGF0ZWREaXN0YW5jZSlcbiAgICAgICAgXG4gICAgICAgIG9uU3VibWl0KGFjdHVhbERpc3RhbmNlKVxuICAgICAgICBzZXRTaG93RGlzdGFuY2VJbnB1dChmYWxzZSlcbiAgICAgICAgc2V0RGlzdGFuY2VJbnB1dERhdGEobnVsbClcbiAgICAgIH0sXG4gICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICBvbkNhbmNlbCgpXG4gICAgICAgIHNldFNob3dEaXN0YW5jZUlucHV0KGZhbHNlKVxuICAgICAgICBzZXREaXN0YW5jZUlucHV0RGF0YShudWxsKVxuICAgICAgfVxuICAgIH0pXG4gICAgc2V0U2hvd0Rpc3RhbmNlSW5wdXQodHJ1ZSlcbiAgfVxuXG4gIC8vIEVuc3VyZSBjbGllbnQtc2lkZSBvbmx5IHJlbmRlcmluZyB0byBwcmV2ZW50IGh5ZHJhdGlvbiBtaXNtYXRjaGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SXNDbGllbnQodHJ1ZSlcbiAgfSwgW10pXG5cbiAgLy8gRG9uJ3QgcmVuZGVyIGNhbnZhcyBkdXJpbmcgU1NSIHRvIHByZXZlbnQgaHlkcmF0aW9uIG1pc21hdGNoZXNcbiAgaWYgKCFpc0NsaWVudCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YHJlbGF0aXZlIHctZnVsbCBoLWZ1bGwgJHtjbGFzc05hbWV9IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGJnLWdyYXktNTBgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNTAwXCI+TG9hZGluZyBjYW52YXMuLi48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2ByZWxhdGl2ZSB3LWZ1bGwgaC1mdWxsICR7Y2xhc3NOYW1lfSBmbGV4IGZsZXgtY29sYH0+XG4gICAgICB7LyogQ2FudmFzIENvbnRyb2xzICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHotMTAgZmxleCBmbGV4LWNvbCBnYXAtMlwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgb25DbGljaz17cmVzZXRDYW52YXN9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicHgtMyBweS0xIGJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZCBzaGFkb3cgaG92ZXI6YmctZ3JheS01MCB0ZXh0LXNtIHRleHQtZ3JheS05MDBcIlxuICAgICAgICAgIHRpdGxlPVwiUmVzZXQgVmlld1wiXG4gICAgICAgID5cbiAgICAgICAgICBSZXNldFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e2ZpdFRvQ29udGVudH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJweC0zIHB5LTEgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCByb3VuZGVkIHNoYWRvdyBob3ZlcjpiZy1ncmF5LTUwIHRleHQtc20gdGV4dC1ncmF5LTkwMFwiXG4gICAgICAgICAgdGl0bGU9XCJGaXQgdG8gQ29udGVudFwiXG4gICAgICAgID5cbiAgICAgICAgICBGaXRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIFxuICAgICAgICB7LyogWm9vbSBDb250cm9scyAqL31cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggc3BhY2UteC0xXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3pvb21Jbn1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xIHB4LTYgcHktMSBiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHJvdW5kZWQgc2hhZG93IGhvdmVyOmJnLWdyYXktNTAgdGV4dC1zbSB0ZXh0LWdyYXktOTAwIHRleHQtY2VudGVyXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJab29tIEluXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgK1xuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3pvb21PdXR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtMSBweC02IHB5LTEgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCByb3VuZGVkIHNoYWRvdyBob3ZlcjpiZy1ncmF5LTUwIHRleHQtc20gdGV4dC1ncmF5LTkwMCB0ZXh0LWNlbnRlclwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiWm9vbSBPdXRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICDiiJJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBab29tIFBlcmNlbnRhZ2UgRGlzcGxheSAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTkwMCBmb250LW1lZGl1bSBiZy13aGl0ZSBweC0zIHB5LTEgcm91bmRlZCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHNoYWRvdyB0ZXh0LWNlbnRlciBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgICAgWm9vbSAoe01hdGgucm91bmQoY2FudmFzU3RhdGUuc2NhbGUgKiAxMDApfSUpXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIE1heCBPdXQgQnV0dG9uICovfVxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFzdGFnZVJlZi5jdXJyZW50KSByZXR1cm5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGNvbnN0IHN0YWdlID0gc3RhZ2VSZWYuY3VycmVudFxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIGJhY2tncm91bmQgaW1hZ2VzLCBmaXQgdGhlIGxhcmdlc3Qgb25lOyBvdGhlcndpc2UgZml0IGNhbnZhc1xuICAgICAgICAgICAgICBpZiAoYmFja2dyb3VuZEltYWdlcyAmJiBiYWNrZ3JvdW5kSW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXN0IGJhY2tncm91bmQgaW1hZ2UgZGltZW5zaW9uc1xuICAgICAgICAgICAgICAgIGxldCBtYXhXaWR0aCA9IDBcbiAgICAgICAgICAgICAgICBsZXQgbWF4SGVpZ2h0ID0gMFxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRJbWFnZSA9IG51bGxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2VzLmZvckVhY2goaW1nID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ1dpZHRoID0gKGltZy53aWR0aCB8fCAwKSAqIChpbWcuc2NhbGVYIHx8IDEpXG4gICAgICAgICAgICAgICAgICBjb25zdCBpbWdIZWlnaHQgPSAoaW1nLmhlaWdodCB8fCAwKSAqIChpbWcuc2NhbGVZIHx8IDEpXG4gICAgICAgICAgICAgICAgICBjb25zdCBpbWdBcmVhID0gaW1nV2lkdGggKiBpbWdIZWlnaHRcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNYXhBcmVhID0gbWF4V2lkdGggKiBtYXhIZWlnaHRcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgaWYgKGltZ0FyZWEgPiBjdXJyZW50TWF4QXJlYSkge1xuICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aCA9IGltZ1dpZHRoXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IGltZ0hlaWdodFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRJbWFnZSA9IGltZ1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG1heFdpZHRoID4gMCAmJiBtYXhIZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgc2NhbGUgdG8gZml0IHRoZSBsYXJnZXN0IGJhY2tncm91bmQgaW1hZ2VcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlWCA9IHN0YWdlU2l6ZS53aWR0aCAvIG1heFdpZHRoXG4gICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZVkgPSBzdGFnZVNpemUuaGVpZ2h0IC8gbWF4SGVpZ2h0XG4gICAgICAgICAgICAgICAgICBjb25zdCBmaXRTY2FsZSA9IE1hdGgubWluKHNjYWxlWCwgc2NhbGVZKSAqIDAuOSAvLyA5MCUgcGFkZGluZ1xuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAvLyBDZW50ZXIgdGhlIGltYWdlIGluIHRoZSB2aWV3cG9ydFxuICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IChzdGFnZVNpemUud2lkdGggLSBtYXhXaWR0aCAqIGZpdFNjYWxlKSAvIDJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSAoc3RhZ2VTaXplLmhlaWdodCAtIG1heEhlaWdodCAqIGZpdFNjYWxlKSAvIDJcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgLy8gSWYgaW1hZ2UgaGFzIHBvc2l0aW9uLCBhY2NvdW50IGZvciBpdFxuICAgICAgICAgICAgICAgICAgY29uc3QgYWRqdXN0ZWRYID0gY2VudGVyWCAtICh0YXJnZXRJbWFnZT8ueCB8fCAwKSAqIGZpdFNjYWxlXG4gICAgICAgICAgICAgICAgICBjb25zdCBhZGp1c3RlZFkgPSBjZW50ZXJZIC0gKHRhcmdldEltYWdlPy55IHx8IDApICogZml0U2NhbGVcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgc3RhZ2Uuc2NhbGUoeyB4OiBmaXRTY2FsZSwgeTogZml0U2NhbGUgfSlcbiAgICAgICAgICAgICAgICAgIHN0YWdlLnBvc2l0aW9uKHsgeDogYWRqdXN0ZWRYLCB5OiBhZGp1c3RlZFkgfSlcbiAgICAgICAgICAgICAgICAgIHN0YWdlLmJhdGNoRHJhdygpXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIHNldENhbnZhc1N0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IGZpdFNjYWxlLFxuICAgICAgICAgICAgICAgICAgICB4OiBhZGp1c3RlZFgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGFkanVzdGVkWVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE1heCBPdXQ6IEZpdCBzYXRlbGxpdGUgaW1hZ2UgKCR7TWF0aC5yb3VuZChtYXhXaWR0aCl9eCR7TWF0aC5yb3VuZChtYXhIZWlnaHQpfXB4KSBpbiB2aWV3cG9ydCAoJHtzdGFnZVNpemUud2lkdGh9eCR7c3RhZ2VTaXplLmhlaWdodH1weCkgYXQgJHtNYXRoLnJvdW5kKGZpdFNjYWxlICogMTAwKX0lIHpvb21gKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAvLyBGYWxsYmFjazogZml0IGVudGlyZSBjYW52YXMgaWYgbm8gYmFja2dyb3VuZCBpbWFnZXNcbiAgICAgICAgICAgICAgY29uc3Qgc2NhbGVYID0gc3RhZ2VTaXplLndpZHRoIC8gQ0FOVkFTX1NJWkVfUElYRUxTXG4gICAgICAgICAgICAgIGNvbnN0IHNjYWxlWSA9IHN0YWdlU2l6ZS5oZWlnaHQgLyBDQU5WQVNfU0laRV9QSVhFTFNcbiAgICAgICAgICAgICAgY29uc3QgZml0U2NhbGUgPSBNYXRoLm1pbihzY2FsZVgsIHNjYWxlWSkgKiAwLjkgLy8gOTAlIHRvIGFkZCBzb21lIHBhZGRpbmdcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIENlbnRlciB0aGUgY2FudmFzIGluIHRoZSB2aWV3cG9ydFxuICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gKHN0YWdlU2l6ZS53aWR0aCAtIENBTlZBU19TSVpFX1BJWEVMUyAqIGZpdFNjYWxlKSAvIDJcbiAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IChzdGFnZVNpemUuaGVpZ2h0IC0gQ0FOVkFTX1NJWkVfUElYRUxTICogZml0U2NhbGUpIC8gMlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgc3RhZ2Uuc2NhbGUoeyB4OiBmaXRTY2FsZSwgeTogZml0U2NhbGUgfSlcbiAgICAgICAgICAgICAgc3RhZ2UucG9zaXRpb24oeyB4OiBjZW50ZXJYLCB5OiBjZW50ZXJZIH0pXG4gICAgICAgICAgICAgIHN0YWdlLmJhdGNoRHJhdygpXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBzZXRDYW52YXNTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2NhbGU6IGZpdFNjYWxlLFxuICAgICAgICAgICAgICAgIHg6IGNlbnRlclgsXG4gICAgICAgICAgICAgICAgeTogY2VudGVyWVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYE1heCBPdXQ6IEZpdCBlbnRpcmUgY2FudmFzICgke0NBTlZBU19TSVpFX1BJWEVMU31weCkgaW4gdmlld3BvcnQgKCR7c3RhZ2VTaXplLndpZHRofXgke3N0YWdlU2l6ZS5oZWlnaHR9cHgpIGF0ICR7TWF0aC5yb3VuZChmaXRTY2FsZSAqIDEwMCl9JSB6b29tYClcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJweC0zIHB5LTEgYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCByb3VuZGVkIHNoYWRvdyBob3ZlcjpiZy1ncmF5LTUwIHRleHQtc20gdGV4dC1ncmF5LTkwMCB0ZXh0LWNlbnRlclwiXG4gICAgICAgICAgICB0aXRsZT1cIkZpdCBFbnRpcmUgU2F0ZWxsaXRlIEltYWdlIGluIFZpZXdcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIE1heCBPdXRcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRHcmlkVmlzaWJsZSghZ3JpZFZpc2libGUpfVxuICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTMgcHktMSBib3JkZXIgcm91bmRlZCBzaGFkb3cgdGV4dC1zbSAke1xuICAgICAgICAgICAgZ3JpZFZpc2libGUgXG4gICAgICAgICAgICAgID8gJ2JnLWJsdWUtNTAwIHRleHQtd2hpdGUgYm9yZGVyLWJsdWUtNTAwJyBcbiAgICAgICAgICAgICAgOiAnYmctd2hpdGUgdGV4dC1ncmF5LTcwMCBib3JkZXItZ3JheS0zMDAgaG92ZXI6YmctZ3JheS01MCdcbiAgICAgICAgICB9YH1cbiAgICAgICAgICB0aXRsZT1cIlRvZ2dsZSBHcmlkXCJcbiAgICAgICAgPlxuICAgICAgICAgIEdyaWRcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRCYWNrZ3JvdW5kTWFuYWdlck9wZW4odHJ1ZSl9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicHgtMyBweS0xIGJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZCBzaGFkb3cgaG92ZXI6YmctZ3JheS01MCB0ZXh0LXNtIHRleHQtZ3JheS05MDBcIlxuICAgICAgICAgIHRpdGxlPVwiTWFuYWdlIEJhY2tncm91bmQgSW1hZ2VzXCJcbiAgICAgICAgPlxuICAgICAgICAgIEltYWdlc1xuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNjYWxlQmFyVmlzaWJsZSghc2NhbGVCYXJWaXNpYmxlKX1cbiAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTEgYm9yZGVyIHJvdW5kZWQgc2hhZG93IHRleHQtc20gJHtcbiAgICAgICAgICAgIHNjYWxlQmFyVmlzaWJsZSBcbiAgICAgICAgICAgICAgPyAnYmctZ3JlZW4tNTAwIHRleHQtd2hpdGUgYm9yZGVyLWdyZWVuLTUwMCcgXG4gICAgICAgICAgICAgIDogJ2JnLXdoaXRlIHRleHQtZ3JheS03MDAgYm9yZGVyLWdyYXktMzAwIGhvdmVyOmJnLWdyYXktNTAnXG4gICAgICAgICAgfWB9XG4gICAgICAgICAgdGl0bGU9XCJUb2dnbGUgU2NhbGUgQmFyXCJcbiAgICAgICAgPlxuICAgICAgICAgIFNjYWxlXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB7LyogRW5oYW5jZWQgTWVhc3VyZW1lbnQgQ29udHJvbHMgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTFcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChtZWFzdXJlbWVudFRvb2xBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBtZWFzdXJlbWVudCBpZiBhbHJlYWR5IGFjdGl2ZVxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRNZWFzdXJlbWVudChudWxsKVxuICAgICAgICAgICAgICAgIHNldE1lYXN1cmVtZW50VG9vbEFjdGl2ZShmYWxzZSlcbiAgICAgICAgICAgICAgICBzZXRNZWFzdXJlbWVudEVkaXRNb2RlKGZhbHNlKVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IG5ldyBtZWFzdXJlbWVudFxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRNZWFzdXJlbWVudCh7XG4gICAgICAgICAgICAgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgZmlyc3RQb2ludDogbnVsbCxcbiAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIHNldE1lYXN1cmVtZW50VG9vbEFjdGl2ZSh0cnVlKVxuICAgICAgICAgICAgICAgIHNldE1lYXN1cmVtZW50RWRpdE1vZGUoZmFsc2UpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTEgYm9yZGVyIHJvdW5kZWQgc2hhZG93IHRleHQtc20gdHJhbnNpdGlvbi1jb2xvcnMgJHtcbiAgICAgICAgICAgICAgbWVhc3VyZW1lbnRUb29sQWN0aXZlICYmICFtZWFzdXJlbWVudEVkaXRNb2RlXG4gICAgICAgICAgICAgICAgPyAnYmctb3JhbmdlLTUwMCB0ZXh0LXdoaXRlIGJvcmRlci1vcmFuZ2UtNTAwJ1xuICAgICAgICAgICAgICAgIDogJ2JnLXdoaXRlIHRleHQtZ3JheS05MDAgYm9yZGVyLWdyYXktMzAwIGhvdmVyOmJnLWdyYXktNTAnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIHRpdGxlPVwiU3RhcnQgTmV3IE1lYXN1cmVtZW50XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICDwn5OPIE1lYXN1cmVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICBcbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50TWVhc3VyZW1lbnQ/LmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBzZXRNZWFzdXJlbWVudEVkaXRNb2RlKCFtZWFzdXJlbWVudEVkaXRNb2RlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFjdXJyZW50TWVhc3VyZW1lbnQ/LmlzQ29tcGxldGV9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2BweC0zIHB5LTEgYm9yZGVyIHJvdW5kZWQgc2hhZG93IHRleHQtc20gdHJhbnNpdGlvbi1jb2xvcnMgJHtcbiAgICAgICAgICAgICAgbWVhc3VyZW1lbnRFZGl0TW9kZVxuICAgICAgICAgICAgICAgID8gJ2JnLWJsdWUtNTAwIHRleHQtd2hpdGUgYm9yZGVyLWJsdWUtNTAwJ1xuICAgICAgICAgICAgICAgIDogY3VycmVudE1lYXN1cmVtZW50Py5pc0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgPyAnYmctd2hpdGUgdGV4dC1ncmF5LTkwMCBib3JkZXItZ3JheS0zMDAgaG92ZXI6YmctZ3JheS01MCdcbiAgICAgICAgICAgICAgICA6ICdiZy1ncmF5LTIwMCB0ZXh0LWdyYXktNDAwIGJvcmRlci1ncmF5LTIwMCBjdXJzb3Itbm90LWFsbG93ZWQnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIHRpdGxlPVwiRWRpdCBNZWFzdXJlbWVudCBMaW5lXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICDinI/vuI8gRWRpdFxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRNZWFzdXJlbWVudD8uaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHNldFNob3dDYWxpYnJhdGVEaWFsb2codHJ1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGRpc2FibGVkPXshY3VycmVudE1lYXN1cmVtZW50Py5pc0NvbXBsZXRlfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgcHgtMyBweS0xIGJvcmRlciByb3VuZGVkIHNoYWRvdyB0ZXh0LXNtIHRyYW5zaXRpb24tY29sb3JzICR7XG4gICAgICAgICAgICAgIGN1cnJlbnRNZWFzdXJlbWVudD8uaXNDb21wbGV0ZVxuICAgICAgICAgICAgICAgID8gJ2JnLXdoaXRlIHRleHQtZ3JheS05MDAgYm9yZGVyLWdyYXktMzAwIGhvdmVyOmJnLWdyYXktNTAnXG4gICAgICAgICAgICAgICAgOiAnYmctZ3JheS0yMDAgdGV4dC1ncmF5LTQwMCBib3JkZXItZ3JheS0yMDAgY3Vyc29yLW5vdC1hbGxvd2VkJ1xuICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICB0aXRsZT1cIkNhbGlicmF0ZSBTY2FsZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAg8J+OryBDYWxpYnJhdGVcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICB7LyogQWR2YW5jZWQgTWVhc3VyZW1lbnQgVG9vbHMgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTFcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRBY3RpdmVNZWFzdXJlbWVudFRvb2woYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAnYXJlYScgPyBudWxsIDogJ2FyZWEnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTMgcHktMiByb3VuZGVkIHRleHQtc20gZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1jb2xvcnMgJHtcbiAgICAgICAgICAgICAgYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAnYXJlYSdcbiAgICAgICAgICAgICAgICA/ICdiZy1ncmVlbi01MDAgdGV4dC13aGl0ZSdcbiAgICAgICAgICAgICAgICA6ICdiZy13aGl0ZSB0ZXh0LWdyYXktNzAwIGJvcmRlciBib3JkZXItZ3JheS0zMDAgaG92ZXI6YmctZ3JheS01MCdcbiAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgdGl0bGU9XCJBcmVhIE1lYXN1cmVtZW50IFRvb2xcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIPCfk5AgQXJlYVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldEFjdGl2ZU1lYXN1cmVtZW50VG9vbChhY3RpdmVNZWFzdXJlbWVudFRvb2wgPT09ICdwZXJpbWV0ZXInID8gbnVsbCA6ICdwZXJpbWV0ZXInKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTMgcHktMiByb3VuZGVkIHRleHQtc20gZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1jb2xvcnMgJHtcbiAgICAgICAgICAgICAgYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAncGVyaW1ldGVyJ1xuICAgICAgICAgICAgICAgID8gJ2JnLWJsdWUtNTAwIHRleHQtd2hpdGUnXG4gICAgICAgICAgICAgICAgOiAnYmctd2hpdGUgdGV4dC1ncmF5LTcwMCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIGhvdmVyOmJnLWdyYXktNTAnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIHRpdGxlPVwiUGVyaW1ldGVyIE1lYXN1cmVtZW50IFRvb2xcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIPCfk48gUGVyaW1ldGVyXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0QWN0aXZlTWVhc3VyZW1lbnRUb29sKGFjdGl2ZU1lYXN1cmVtZW50VG9vbCA9PT0gJ2Rpc3RhbmNlJyA/IG51bGwgOiAnZGlzdGFuY2UnKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YHB4LTMgcHktMiByb3VuZGVkIHRleHQtc20gZm9udC1tZWRpdW0gdHJhbnNpdGlvbi1jb2xvcnMgJHtcbiAgICAgICAgICAgICAgYWN0aXZlTWVhc3VyZW1lbnRUb29sID09PSAnZGlzdGFuY2UnXG4gICAgICAgICAgICAgICAgPyAnYmctYW1iZXItNTAwIHRleHQtd2hpdGUnXG4gICAgICAgICAgICAgICAgOiAnYmctd2hpdGUgdGV4dC1ncmF5LTcwMCBib3JkZXIgYm9yZGVyLWdyYXktMzAwIGhvdmVyOmJnLWdyYXktNTAnXG4gICAgICAgICAgICB9YH1cbiAgICAgICAgICAgIHRpdGxlPVwiRGlzdGFuY2UgTWVhc3VyZW1lbnQgVG9vbFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAg8J+TjyBEaXN0YW5jZVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIFxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBDYW52YXMgSW5mbyByZW1vdmVkIC0gbW92ZWQgdG8gUHJvcGVydGllcyBwYW5lbCAqL31cblxuICAgICAgey8qIEtvbnZhIFN0YWdlICovfVxuICAgICAgPFN0YWdlXG4gICAgICAgIHJlZj17c3RhZ2VSZWZ9XG4gICAgICAgIHdpZHRoPXtzdGFnZVNpemUud2lkdGh9XG4gICAgICAgIGhlaWdodD17c3RhZ2VTaXplLmhlaWdodH1cbiAgICAgICAgZHJhZ2dhYmxlPXshbWVhc3VyZW1lbnRUb29sQWN0aXZlICYmICFhY3RpdmVNZWFzdXJlbWVudFRvb2x9XG4gICAgICAgIG9uV2hlZWw9e2hhbmRsZVdoZWVsfVxuICAgICAgICBvbkRyYWdFbmQ9e2hhbmRsZURyYWdFbmR9XG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZVN0YWdlQ2xpY2t9XG4gICAgICAgIG9uRGJsQ2xpY2s9e2hhbmRsZVN0YWdlRG91YmxlQ2xpY2t9XG4gICAgICAgIGNsYXNzTmFtZT1cImJvcmRlciBib3JkZXItZ3JheS0zMDAgYmctZ3JheS01MCBmbGV4LTFcIlxuICAgICAgICBvbkNvbnRlbnRNb3VzZURvd249eygpID0+IHtcbiAgICAgICAgICAvLyBFbnN1cmUgY2FudmFzIGVsZW1lbnQgaXMgY2FwdHVyZWQgYWZ0ZXIgc3RhZ2UgaXMgZnVsbHkgbW91bnRlZFxuICAgICAgICAgIGlmIChzdGFnZVJlZi5jdXJyZW50ICYmIG9uQ2FudmFzUmVhZHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHN0YWdlUmVmLmN1cnJlbnQuY29udGFpbmVyKClcbiAgICAgICAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N0YWdlIG1vdW50ZWQsIGNhcHR1cmluZyBjYW52YXMgZWxlbWVudDonLCBjb250YWluZXIpXG4gICAgICAgICAgICAgIG9uQ2FudmFzUmVhZHkoY29udGFpbmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPExheWVyPlxuICAgICAgICAgIHsvKiBCYWNrZ3JvdW5kIEltYWdlcyBMYXllciAqL31cbiAgICAgICAgICA8QmFja2dyb3VuZExheWVyXG4gICAgICAgICAgICBpbWFnZXM9e2JhY2tncm91bmRJbWFnZXN9XG4gICAgICAgICAgICBvbkltYWdlVXBkYXRlPXtvbkJhY2tncm91bmRJbWFnZVVwZGF0ZX1cbiAgICAgICAgICAgIG9uSW1hZ2VEZWxldGU9e29uQmFja2dyb3VuZEltYWdlRGVsZXRlfVxuICAgICAgICAgICAgb25JbWFnZVNlbGVjdD17aGFuZGxlQmFja2dyb3VuZEltYWdlU2VsZWN0fVxuICAgICAgICAgICAgc2VsZWN0ZWRJbWFnZUlkPXtzZWxlY3RlZEJhY2tncm91bmRJbWFnZUlkfVxuICAgICAgICAgICAgc2NhbGU9e2NhbnZhc1N0YXRlLnNjYWxlfVxuICAgICAgICAgICAgZWRpdGFibGU9e3RydWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogR3JpZCBMYXllciAqL31cbiAgICAgICAgICA8R3JpZExheWVyXG4gICAgICAgICAgICB3aWR0aD17Q0FOVkFTX1NJWkVfUElYRUxTfVxuICAgICAgICAgICAgaGVpZ2h0PXtDQU5WQVNfU0laRV9QSVhFTFN9XG4gICAgICAgICAgICBzY2FsZT17Y2FudmFzU3RhdGUuc2NhbGV9XG4gICAgICAgICAgICB4PXtjYW52YXNTdGF0ZS54fVxuICAgICAgICAgICAgeT17Y2FudmFzU3RhdGUueX1cbiAgICAgICAgICAgIHZpc2libGU9e2dyaWRWaXNpYmxlfVxuICAgICAgICAgICAgZ3JpZFNpemU9e1BJWEVMU19QRVJfRk9PVH0gLy8gMTAgcGl4ZWxzID0gMSBmb290IGZvciAyNTBrIHNxIGZ0IGNhbnZhc1xuICAgICAgICAgIC8+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIEVxdWlwbWVudCBMYXllciAqL31cbiAgICAgICAgICA8RXF1aXBtZW50TGF5ZXJcbiAgICAgICAgICAgIGVxdWlwbWVudD17cGxhY2VkRXF1aXBtZW50fVxuICAgICAgICAgICAgZXF1aXBtZW50RGVmaW5pdGlvbnM9e2VxdWlwbWVudERlZmluaXRpb25zfVxuICAgICAgICAgICAgc2NhbGU9e2NhbnZhc1N0YXRlLnNjYWxlfVxuICAgICAgICAgICAgb25FcXVpcG1lbnRTZWxlY3Q9e29uRXF1aXBtZW50U2VsZWN0fVxuICAgICAgICAgICAgb25FcXVpcG1lbnRNb3ZlPXtvbkVxdWlwbWVudE1vdmV9XG4gICAgICAgICAgICBvbkVxdWlwbWVudFJvdGF0ZT17b25FcXVpcG1lbnRSb3RhdGV9XG4gICAgICAgICAgICBvbkVxdWlwbWVudERlbGV0ZT17b25FcXVpcG1lbnREZWxldGV9XG4gICAgICAgICAgICBzZWxlY3RlZEVxdWlwbWVudElkPXtzZWxlY3RlZEVxdWlwbWVudElkfVxuICAgICAgICAgICAgc25hcFRvR3JpZD17dHJ1ZX1cbiAgICAgICAgICAgIGdyaWRTaXplPXtQSVhFTFNfUEVSX0ZPT1R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogRW5oYW5jZWQgTWVhc3VyZW1lbnQgVG9vbCAqL31cbiAgICAgICAgICA8RW5oYW5jZWRNZWFzdXJlbWVudFRvb2xcbiAgICAgICAgICAgIGlzQWN0aXZlPXttZWFzdXJlbWVudFRvb2xBY3RpdmUgJiYgIWFjdGl2ZU1lYXN1cmVtZW50VG9vbH1cbiAgICAgICAgICAgIGVkaXRNb2RlPXttZWFzdXJlbWVudEVkaXRNb2RlfVxuICAgICAgICAgICAgc2NhbGU9e2NhbnZhc1N0YXRlLnNjYWxlfVxuICAgICAgICAgICAgcGl4ZWxzUGVyRm9vdD17UElYRUxTX1BFUl9GT09UfVxuICAgICAgICAgICAgY3VycmVudE1lYXN1cmVtZW50PXtjdXJyZW50TWVhc3VyZW1lbnR9XG4gICAgICAgICAgICBvblBvaW50U2V0PXtoYW5kbGVFbmhhbmNlZE1lYXN1cmVtZW50UG9pbnRTZXR9XG4gICAgICAgICAgICBvbk1lYXN1cmVtZW50Q29tcGxldGU9eyhkaXN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRW5oYW5jZWQgbWVhc3VyZW1lbnQgY29tcGxldGVkOicsIGRpc3RhbmNlKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbk1lYXN1cmVtZW50RWRpdD17aGFuZGxlRW5oYW5jZWRNZWFzdXJlbWVudEVkaXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogTGVnYWN5IE1lYXN1cmVtZW50IFRvb2wgKi99XG4gICAgICAgICAgPE1lYXN1cmVtZW50VG9vbFxuICAgICAgICAgICAgaXNBY3RpdmU9e2ZhbHNlfSAvLyBEaXNhYmxlZCBpbiBmYXZvciBvZiBlbmhhbmNlZCB0b29sXG4gICAgICAgICAgICBzY2FsZT17Y2FudmFzU3RhdGUuc2NhbGV9XG4gICAgICAgICAgICBwaXhlbHNQZXJGb290PXtQSVhFTFNfUEVSX0ZPT1R9XG4gICAgICAgICAgICBvbk1lYXN1cmVtZW50Q29tcGxldGU9eyhtZWFzdXJlbWVudCkgPT4ge1xuICAgICAgICAgICAgICBzZXRNZWFzdXJlbWVudHMocHJldiA9PiBbLi4ucHJldiwgbWVhc3VyZW1lbnRdKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05ldyBtZWFzdXJlbWVudDonLCBtZWFzdXJlbWVudCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25TaG93RGlzdGFuY2VJbnB1dD17aGFuZGxlU2hvd0Rpc3RhbmNlSW5wdXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICBcbiAgICAgICAgICB7LyogU2ltcGxlIE1lYXN1cmVtZW50IFRvb2xzICovfVxuICAgICAgICAgIDxTaW1wbGVNZWFzdXJlbWVudFRvb2xcbiAgICAgICAgICAgIGFjdGl2ZVRvb2w9e2FjdGl2ZU1lYXN1cmVtZW50VG9vbH1cbiAgICAgICAgICAgIHNjYWxlPXtjYW52YXNTdGF0ZS5zY2FsZX1cbiAgICAgICAgICAgIHBpeGVsc1BlckZvb3Q9e1BJWEVMU19QRVJfRk9PVH1cbiAgICAgICAgICAgIG1lYXN1cmVtZW50cz17c2ltcGxlTWVhc3VyZW1lbnRzfVxuICAgICAgICAgICAgb25NZWFzdXJlbWVudENvbXBsZXRlPXsobWVhc3VyZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgc2V0U2ltcGxlTWVhc3VyZW1lbnRzKHByZXYgPT4gWy4uLnByZXYsIG1lYXN1cmVtZW50XSlcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbk1lYXN1cmVtZW50RGVsZXRlPXsoaWQpID0+IHtcbiAgICAgICAgICAgICAgc2V0U2ltcGxlTWVhc3VyZW1lbnRzKHByZXYgPT4gcHJldi5maWx0ZXIobSA9PiBtLmlkICE9PSBpZCkpXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgXG4gICAgICAgICAgey8qIFNjYWxlIEJhciBPdmVybGF5ICovfVxuICAgICAgICAgIHtzY2FsZUJhclZpc2libGUgJiYgKFxuICAgICAgICAgICAgPFNjYWxlQmFyXG4gICAgICAgICAgICAgIHNjYWxlPXtjYW52YXNTdGF0ZS5zY2FsZX1cbiAgICAgICAgICAgICAgY2FudmFzV2lkdGg9e3N0YWdlU2l6ZS53aWR0aH1cbiAgICAgICAgICAgICAgY2FudmFzSGVpZ2h0PXtzdGFnZVNpemUuaGVpZ2h0fVxuICAgICAgICAgICAgICBwaXhlbHNQZXJGb290PXtQSVhFTFNfUEVSX0ZPT1R9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvTGF5ZXI+XG4gICAgICA8L1N0YWdlPlxuICAgICAgXG4gICAgICB7LyogQmFja2dyb3VuZCBJbWFnZSBNYW5hZ2VyIE1vZGFsICovfVxuICAgICAgPEJhY2tncm91bmRJbWFnZU1hbmFnZXJcbiAgICAgICAgaW1hZ2VzPXtiYWNrZ3JvdW5kSW1hZ2VzfVxuICAgICAgICBvbkltYWdlQWRkPXtoYW5kbGVCYWNrZ3JvdW5kSW1hZ2VBZGR9XG4gICAgICAgIG9uSW1hZ2VVcGRhdGU9e29uQmFja2dyb3VuZEltYWdlVXBkYXRlIHx8ICgoKSA9PiB7fSl9XG4gICAgICAgIG9uSW1hZ2VEZWxldGU9e29uQmFja2dyb3VuZEltYWdlRGVsZXRlIHx8ICgoKSA9PiB7fSl9XG4gICAgICAgIG9uSW1hZ2VTZWxlY3Q9e2hhbmRsZUJhY2tncm91bmRJbWFnZVNlbGVjdH1cbiAgICAgICAgc2VsZWN0ZWRJbWFnZUlkPXtzZWxlY3RlZEJhY2tncm91bmRJbWFnZUlkfVxuICAgICAgICBpc09wZW49e2JhY2tncm91bmRNYW5hZ2VyT3Blbn1cbiAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0QmFja2dyb3VuZE1hbmFnZXJPcGVuKGZhbHNlKX1cbiAgICAgIC8+XG4gICAgICBcbiAgICAgIHsvKiBEaXN0YW5jZSBJbnB1dCBNb2RhbCAqL31cbiAgICAgIDxEaXN0YW5jZUlucHV0TW9kYWxcbiAgICAgICAgaXNPcGVuPXtzaG93RGlzdGFuY2VJbnB1dH1cbiAgICAgICAgY2FsY3VsYXRlZERpc3RhbmNlPXtkaXN0YW5jZUlucHV0RGF0YT8uY2FsY3VsYXRlZERpc3RhbmNlIHx8IDB9XG4gICAgICAgIG9uU3VibWl0PXtkaXN0YW5jZUlucHV0RGF0YT8ub25TdWJtaXQgfHwgKCgpID0+IHt9KX1cbiAgICAgICAgb25DYW5jZWw9e2Rpc3RhbmNlSW5wdXREYXRhPy5vbkNhbmNlbCB8fCAoKCkgPT4ge30pfVxuICAgICAgLz5cbiAgICAgIFxuICAgICAgey8qIEVuaGFuY2VkIENhbGlicmF0ZSBEaWFsb2cgKi99XG4gICAgICA8RW5oYW5jZWRDYWxpYnJhdGVEaWFsb2dcbiAgICAgICAgaXNPcGVuPXtzaG93Q2FsaWJyYXRlRGlhbG9nfVxuICAgICAgICBjYWxjdWxhdGVkRGlzdGFuY2U9e2N1cnJlbnRNZWFzdXJlbWVudCAmJiBjdXJyZW50TWVhc3VyZW1lbnQuZmlyc3RQb2ludCAmJiBjdXJyZW50TWVhc3VyZW1lbnQuc2Vjb25kUG9pbnQgXG4gICAgICAgICAgPyBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgIE1hdGgucG93KGN1cnJlbnRNZWFzdXJlbWVudC5zZWNvbmRQb2ludC54IC0gY3VycmVudE1lYXN1cmVtZW50LmZpcnN0UG9pbnQueCwgMikgK1xuICAgICAgICAgICAgICBNYXRoLnBvdyhjdXJyZW50TWVhc3VyZW1lbnQuc2Vjb25kUG9pbnQueSAtIGN1cnJlbnRNZWFzdXJlbWVudC5maXJzdFBvaW50LnksIDIpXG4gICAgICAgICAgICApIC8gUElYRUxTX1BFUl9GT09UXG4gICAgICAgICAgOiAwXG4gICAgICAgIH1cbiAgICAgICAgb25TdWJtaXQ9e2hhbmRsZUNhbGlicmF0ZVN1Ym1pdH1cbiAgICAgICAgb25FZGl0PXtoYW5kbGVDYWxpYnJhdGVFZGl0fVxuICAgICAgICBvbkNhbmNlbD17aGFuZGxlQ2FsaWJyYXRlQ2FuY2VsfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW52YXNFZGl0b3JcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVJlZiIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJTdGFnZSIsIkxheWVyIiwiR3JpZExheWVyIiwiRXF1aXBtZW50TGF5ZXIiLCJCYWNrZ3JvdW5kTGF5ZXIiLCJCYWNrZ3JvdW5kSW1hZ2VNYW5hZ2VyIiwiU2NhbGVCYXIiLCJNZWFzdXJlbWVudFRvb2wiLCJEaXN0YW5jZUlucHV0TW9kYWwiLCJTaW1wbGVNZWFzdXJlbWVudFRvb2wiLCJFbmhhbmNlZE1lYXN1cmVtZW50VG9vbCIsIkVuaGFuY2VkQ2FsaWJyYXRlRGlhbG9nIiwiQ2FudmFzRWRpdG9yIiwid2lkdGgiLCJoZWlnaHQiLCJjbGFzc05hbWUiLCJvbkVxdWlwbWVudEFkZCIsInBsYWNlZEVxdWlwbWVudCIsImVxdWlwbWVudERlZmluaXRpb25zIiwib25FcXVpcG1lbnRTZWxlY3QiLCJvbkVxdWlwbWVudE1vdmUiLCJvbkVxdWlwbWVudFJvdGF0ZSIsIm9uRXF1aXBtZW50RGVsZXRlIiwic2VsZWN0ZWRFcXVpcG1lbnRJZCIsImJhY2tncm91bmRJbWFnZXMiLCJvbkJhY2tncm91bmRJbWFnZUFkZCIsIm9uQmFja2dyb3VuZEltYWdlVXBkYXRlIiwib25CYWNrZ3JvdW5kSW1hZ2VEZWxldGUiLCJvbkNhbnZhc1JlYWR5Iiwic3RhZ2VSZWYiLCJpc0NsaWVudCIsInNldElzQ2xpZW50IiwiQ0FOVkFTX0FSRUFfU1FfRlQiLCJDQU5WQVNfU0lERV9GVCIsIk1hdGgiLCJzcXJ0IiwiUElYRUxTX1BFUl9GT09UIiwiQ0FOVkFTX1NJWkVfUElYRUxTIiwiY2FudmFzU3RhdGUiLCJzZXRDYW52YXNTdGF0ZSIsInNjYWxlIiwieCIsInkiLCJzdGFnZVNpemUiLCJzZXRTdGFnZVNpemUiLCJncmlkVmlzaWJsZSIsInNldEdyaWRWaXNpYmxlIiwiYmFja2dyb3VuZE1hbmFnZXJPcGVuIiwic2V0QmFja2dyb3VuZE1hbmFnZXJPcGVuIiwic2VsZWN0ZWRCYWNrZ3JvdW5kSW1hZ2VJZCIsInNldFNlbGVjdGVkQmFja2dyb3VuZEltYWdlSWQiLCJzY2FsZUJhclZpc2libGUiLCJzZXRTY2FsZUJhclZpc2libGUiLCJtZWFzdXJlbWVudFRvb2xBY3RpdmUiLCJzZXRNZWFzdXJlbWVudFRvb2xBY3RpdmUiLCJtZWFzdXJlbWVudHMiLCJzZXRNZWFzdXJlbWVudHMiLCJhY3RpdmVNZWFzdXJlbWVudFRvb2wiLCJzZXRBY3RpdmVNZWFzdXJlbWVudFRvb2wiLCJzaW1wbGVNZWFzdXJlbWVudHMiLCJzZXRTaW1wbGVNZWFzdXJlbWVudHMiLCJzaG93RGlzdGFuY2VJbnB1dCIsInNldFNob3dEaXN0YW5jZUlucHV0IiwiZGlzdGFuY2VJbnB1dERhdGEiLCJzZXREaXN0YW5jZUlucHV0RGF0YSIsIm1lYXN1cmVtZW50RWRpdE1vZGUiLCJzZXRNZWFzdXJlbWVudEVkaXRNb2RlIiwiY3VycmVudE1lYXN1cmVtZW50Iiwic2V0Q3VycmVudE1lYXN1cmVtZW50Iiwic2hvd0NhbGlicmF0ZURpYWxvZyIsInNldFNob3dDYWxpYnJhdGVEaWFsb2ciLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImN1cnJlbnQiLCJjb250YWluZXIiLCJjb25zb2xlIiwibG9nIiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlUmVzaXplIiwiY29udGFpbmVyV2lkdGgiLCJvZmZzZXRXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlV2hlZWwiLCJlIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJzdGFnZSIsInRhcmdldCIsImdldFN0YWdlIiwib2xkU2NhbGUiLCJzY2FsZVgiLCJwb2ludGVyIiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwic2NhbGVCeSIsIm5ld1NjYWxlIiwiZGVsdGFZIiwibWluU2NhbGUiLCJtYXhTY2FsZSIsImNsYW1wZWRTY2FsZSIsIm1heCIsIm1pbiIsIm1vdXNlUG9pbnRUbyIsIm5ld1BvcyIsInBvc2l0aW9uIiwiYmF0Y2hEcmF3IiwiaGFuZGxlRHJhZ0VuZCIsInByZXYiLCJyZXNldENhbnZhcyIsImRlZmF1bHRTY2FsZSIsImNlbnRlclgiLCJjZW50ZXJZIiwiZml0VG9Db250ZW50IiwibGVuZ3RoIiwibWluWCIsIkluZmluaXR5IiwibWF4WCIsIm1pblkiLCJtYXhZIiwiZm9yRWFjaCIsImVxdWlwbWVudCIsImVxdWlwbWVudERlZiIsImZpbmQiLCJkZWYiLCJpZCIsImVxdWlwbWVudElkIiwiZGltZW5zaW9ucyIsImlzQ2lyY3VsYXIiLCJzaGFwZSIsImNsZWFyYW5jZSIsInJpZGVDbGVhcmluZyIsImNsZWFyYW5jZVBpeGVscyIsImVxdWlwbWVudE1pblgiLCJlcXVpcG1lbnRNYXhYIiwiZXF1aXBtZW50TWluWSIsImVxdWlwbWVudE1heFkiLCJyYWRpdXMiLCJwYWRkaW5nIiwiY29udGVudFdpZHRoIiwiY29udGVudEhlaWdodCIsInNjYWxlWSIsIm9wdGltYWxTY2FsZSIsIm5ld1giLCJuZXdZIiwiY29udGVudEJvdW5kcyIsImNlbnRlciIsInpvb21JbiIsInpvb21PdXQiLCJnZXRWaXNpYmxlQm91bmRzIiwiYnVmZmVyIiwiaGFuZGxlTWVhc3VyZW1lbnRUb29sQ2xpY2siLCJoYW5kbGVycyIsIm1lYXN1cmVtZW50VG9vbEhhbmRsZXJzIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVNZWFzdXJlbWVudFRvb2xEb3VibGVDbGljayIsIm0iLCJjb21wbGV0ZWQiLCJwb2ludHMiLCJ2YWx1ZSIsImxhYmVsIiwiYXJlYSIsIm4iLCJpIiwiaiIsImFicyIsInRvRml4ZWQiLCJwZXJpbWV0ZXIiLCJkeCIsImR5IiwiY29tcGxldGVkTWVhc3VyZW1lbnQiLCJtYXAiLCJoYW5kbGVFbmhhbmNlZE1lYXN1cmVtZW50UG9pbnRTZXQiLCJwb2ludCIsImZpcnN0UG9pbnQiLCJzZWNvbmRQb2ludCIsInVwZGF0ZWRNZWFzdXJlbWVudCIsImlzQ29tcGxldGUiLCJwaXhlbERpc3RhbmNlIiwiY2FsY3VsYXRlZERpc3RhbmNlIiwiaGFuZGxlRW5oYW5jZWRNZWFzdXJlbWVudEVkaXQiLCJoYW5kbGVDYWxpYnJhdGVTdWJtaXQiLCJhY3R1YWxEaXN0YW5jZSIsInNjYWxlRmFjdG9yIiwicmVhbFdvcmxkRGlzdGFuY2UiLCJpbWFnZSIsImhhbmRsZUNhbGlicmF0ZUVkaXQiLCJoYW5kbGVDYWxpYnJhdGVDYW5jZWwiLCJoYW5kbGVDYW52YXNDbGljayIsImNhbnZhc1giLCJjYW52YXNZIiwibmV3UG9pbnQiLCJzb21lIiwidXBkYXRlZFBvaW50cyIsImRpc3RhbmNlIiwicG93IiwibmV3TWVhc3VyZW1lbnQiLCJEYXRlIiwibm93IiwidHlwZSIsImhhbmRsZVN0YWdlQ2xpY2siLCJjbGlja2VkT25FbXB0eSIsInBvcyIsImVuaGFuY2VkTWVhc3VyZW1lbnRIYW5kbGVycyIsImhhbmRsZVN0YWdlRG91YmxlQ2xpY2siLCJhcmVhSW5TcUZ0Iiwicm91bmQiLCJ0b0xvY2FsZVN0cmluZyIsInBlcmltZXRlckluRnQiLCJoYW5kbGVCYWNrZ3JvdW5kSW1hZ2VBZGQiLCJpbWFnZVdpdGhJZCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiaGFuZGxlQmFja2dyb3VuZEltYWdlU2VsZWN0IiwiaW1hZ2VJZCIsImNhbGlicmF0ZUltYWdlU2NhbGUiLCJzY2FsZUNvcnJlY3Rpb24iLCJoYW5kbGVTaG93RGlzdGFuY2VJbnB1dCIsIm9uU3VibWl0Iiwib25DYW5jZWwiLCJkaXYiLCJidXR0b24iLCJvbkNsaWNrIiwidGl0bGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInRhcmdldEltYWdlIiwiaW1nIiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCJpbWdBcmVhIiwiY3VycmVudE1heEFyZWEiLCJmaXRTY2FsZSIsImFkanVzdGVkWCIsImFkanVzdGVkWSIsImRpc2FibGVkIiwicmVmIiwiZHJhZ2dhYmxlIiwib25XaGVlbCIsIm9uRHJhZ0VuZCIsIm9uRGJsQ2xpY2siLCJvbkNvbnRlbnRNb3VzZURvd24iLCJpbWFnZXMiLCJvbkltYWdlVXBkYXRlIiwib25JbWFnZURlbGV0ZSIsIm9uSW1hZ2VTZWxlY3QiLCJzZWxlY3RlZEltYWdlSWQiLCJlZGl0YWJsZSIsInZpc2libGUiLCJncmlkU2l6ZSIsInNuYXBUb0dyaWQiLCJpc0FjdGl2ZSIsImVkaXRNb2RlIiwicGl4ZWxzUGVyRm9vdCIsIm9uUG9pbnRTZXQiLCJvbk1lYXN1cmVtZW50Q29tcGxldGUiLCJvbk1lYXN1cmVtZW50RWRpdCIsIm1lYXN1cmVtZW50Iiwib25TaG93RGlzdGFuY2VJbnB1dCIsImFjdGl2ZVRvb2wiLCJvbk1lYXN1cmVtZW50RGVsZXRlIiwiZmlsdGVyIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJvbkltYWdlQWRkIiwiaXNPcGVuIiwib25DbG9zZSIsIm9uRWRpdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/canvas/CanvasEditor.tsx\n"));

/***/ })

});